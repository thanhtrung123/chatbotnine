<?php

namespace App\Exceptions;

use Exception;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Symfony\Component\HttpKernel\Exception\HttpException;

class Handler extends ExceptionHandler
{
    private $is_admin;

    /**
     * A list of the exception types that are not reported.
     *
     * @var array
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed for validation exceptions.
     *
     * @var array
     */
    protected $dontFlash = [
        'password',
        'password_confirmation',
    ];

    /**
     * Report or log an exception.
     *
     * This is a great spot to send exceptions to Sentry, Bugsnag, etc.
     *
     * @param \Exception $exception
     * @return void
     */
    public function report(Exception $exception)
    {
        parent::report($exception);
    }

    /**
     * Render an exception into an HTTP response.
     *
     * @param \Illuminate\Http\Request $request
     * @param \Exception $exception
     * @return \Illuminate\Http\Response
     */
    public function render($request, Exception $exception)
    {
        $route_name = $request->route() ? $request->route()->getName() : '';
        $this->is_admin = strpos($route_name, 'admin') === 0;
        //api.bot.sns 例外時JSONで返す
        if (strpos($route_name, 'api.bot.sns') === 0) {
            $status = 400;
            $response = ['status' => $status, 'error' => ['type' => 'LaravelException']];
            if (config('app.debug')) {
                $response['error']['exception'] = get_class($exception); // Reflection might be better here
                $response['error']['message'] = $exception->getMessage();
                $response['error']['trace'] = $exception->getTrace();
            } else {
                $response['error']['message'] = 'Fatal error has occurred. Please check the error log.';
            }
            if ($this->isHttpException($exception)) {
                $status = $exception->getStatusCode();
            }
            $response['status'] = $status;
            return response()->json($response, $status);
        }
        return parent::render($request, $exception);
    }

    protected function renderHttpException(HttpException $e)
    {
        if ($this->is_admin) {
            $code = $e->getStatusCode();
            switch ($code) {
                case '419':
                    return response()->view('errors.admin.419');
            }
        }
        return parent::renderHttpException($e); // TODO: Change the autogenerated stub
    }


}
