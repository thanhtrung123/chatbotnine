/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 6);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/assets/js/drawflow.js":
/***/ (function(module, exports, __webpack_require__) {

eval("/**\r\n * 利用者側用JavaScript\r\n */\n__webpack_require__(\"./resources/assets/js/drawflow/drawflow.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2RyYXdmbG93LmpzPzVhN2YiXSwibmFtZXMiOlsicmVxdWlyZSJdLCJtYXBwaW5ncyI6IkFBQUE7OztBQUdBQSxtQkFBT0EsQ0FBQyw0Q0FBUiIsImZpbGUiOiIuL3Jlc291cmNlcy9hc3NldHMvanMvZHJhd2Zsb3cuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICog5Yip55So6ICF5YG055SoSmF2YVNjcmlwdFxyXG4gKi9cclxucmVxdWlyZSgnLi9kcmF3Zmxvdy9kcmF3Zmxvdy5qcycpO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3Jlc291cmNlcy9hc3NldHMvanMvZHJhd2Zsb3cuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/assets/js/drawflow.js\n");

/***/ }),

/***/ "./resources/assets/js/drawflow/drawflow.js":
/***/ (function(module, exports) {

eval("var _typeof2 = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n// MIT License\n\n// Copyright (c) 2020 Jero Soler\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n//\"use strict\";\n// https://tc39.github.io/ecma262/#sec-array.prototype.findIndex\nif (!Array.prototype.findIndex) {\n  Object.defineProperty(Array.prototype, 'findIndex', {\n    value: function value(predicate) {\n      // 1. Let O be ? ToObject(this value).\n      if (this == null) {\n        throw new TypeError('\"this\" is null or not defined');\n      }\n\n      var o = Object(this);\n\n      // 2. Let len be ? ToLength(? Get(O, \"length\")).\n      var len = o.length >>> 0;\n\n      // 3. If IsCallable(predicate) is false, throw a TypeError exception.\n      if (typeof predicate !== 'function') {\n        throw new TypeError('predicate must be a function');\n      }\n\n      // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n      var thisArg = arguments[1];\n\n      // 5. Let k be 0.\n      var k = 0;\n\n      // 6. Repeat, while k < len\n      while (k < len) {\n        // a. Let Pk be ! ToString(k).\n        // b. Let kValue be ? Get(O, Pk).\n        // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).\n        // d. If testResult is true, return k.\n        var kValue = o[k];\n        if (predicate.call(thisArg, kValue, k, o)) {\n          return k;\n        }\n        // e. Increase k by 1.\n        k++;\n      }\n\n      // 7. Return -1.\n      return -1;\n    }\n  });\n}\nif (!Object.entries) {\n  Object.entries = function (obj) {\n    var ownProps = Object.keys(obj),\n        i = ownProps.length,\n        resArray = new Array(i); // preallocate the Array\n    while (i--) {\n      resArray[i] = [ownProps[i], obj[ownProps[i]]];\n    }return resArray;\n  };\n}\nfunction _instanceof(left, right) {\n  if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n    return !!right[Symbol.hasInstance](left);\n  } else {\n    return left instanceof right;\n  }\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);\n    };\n  }return _typeof(obj);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });keys.push.apply(keys, symbols);\n  }return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n  } else {\n    obj[key] = value;\n  }return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!_instanceof(instance, Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;\n}\n\nwindow.Drawflow = /*#__PURE__*/function () {\n  function Drawflow(container) {\n    var render = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    _classCallCheck(this, Drawflow);\n\n    this.events = {};\n    this.container = container;\n    this.precanvas = null;\n    this.precanvas_wrap = null;\n    this.nodeId = 1;\n    this.ele_selected = null;\n    this.node_selected = null;\n    this.drag = false;\n    this.reroute = false;\n    this.reroute_fix_curvature = false;\n    this.curvature = 0.5;\n    this.reroute_curvature_start_end = 0.5;\n    this.reroute_curvature = 0.5;\n    this.reroute_width = 6;\n    this.drag_point = false;\n    this.editor_selected = false;\n    this.connection = false;\n    this.connection_ele = null;\n    this.connection_selected = null;\n    this.canvas_x = 0;\n    this.canvas_y = 0;\n    this.pos_x = 0;\n    this.pos_y = 0;\n    this.mouse_x = 0;\n    this.mouse_y = 0;\n    this.line_path = 5;\n    this.first_click = null;\n    this.force_first_input = false;\n    this.select_elements = null;\n    this.noderegister = {};\n    this.render = render;\n    this.drawflow = {\n      \"drawflow\": {\n        \"Home\": {\n          \"data\": {}\n        }\n      }\n    }; // Configurable options\n\n    this.module = 'Home';\n    this.editor_mode = 'edit';\n    this.zoom = 1;\n    this.zoom_max = 1.6;\n    this.zoom_min = 0.11; // Mobile\n\n    this.evCache = new Array();\n    this.movingX = false;\n    this.movingY = false;\n    this.autoSpeedX = 0;\n    this.autoSpeedY = 0;\n    this.autoRange = 100;\n    this.timestampX = 0;\n    this.timestampY = 0;\n    this.prevDiff = -1;\n\n    this.history = [];\n    this.maximumHistories = 11;\n    this.currentHitoryIndex = 0;\n    this.preventHistoryEvent = false;\n  }\n\n  _createClass(Drawflow, [{\n    key: \"start\",\n    value: function start() {\n      // console.info(\"Start Drawflow!!\");\n      this.container.classList.add(\"parent-drawflow\");\n      this.container.tabIndex = 0;\n      this.precanvas = document.createElement('div');\n      this.precanvas.classList.add(\"drawflow\");\n      this.precanvas_wrap = document.createElement('div');\n      this.precanvas_wrap.classList.add(\"drawflow_wrap\");\n      this.container.appendChild(this.precanvas_wrap);\n      this.precanvas_wrap.appendChild(this.precanvas);\n      /* Mouse and Touch Actions */\n\n      this.container.addEventListener('mouseup', this.dragEnd.bind(this));\n      this.container.addEventListener('mousemove', this.position.bind(this));\n      this.container.addEventListener('mousedown', this.click.bind(this));\n      this.container.addEventListener('touchend', this.dragEnd.bind(this));\n      this.container.addEventListener('touchmove', this.position.bind(this));\n      this.container.addEventListener('touchstart', this.click.bind(this));\n      /* Context Menu */\n\n      this.container.addEventListener('contextmenu', this.contextmenu.bind(this));\n      /* Delete */\n\n      this.container.addEventListener('keydown', this.key.bind(this));\n      /* Zoom Mouse */\n\n      this.container.addEventListener('wheel', this.zoom_enter.bind(this));\n      /* Update data Nodes */\n\n      this.container.addEventListener('input', this.updateNodeValue.bind(this));\n      //this.container.addEventListener('dblclick', this.dblclick.bind(this));\n      /* Mobile zoom */\n\n      this.container.onpointerdown = this.pointerdown_handler.bind(this);\n      this.container.onpointermove = this.pointermove_handler.bind(this);\n      this.container.onpointerup = this.pointerup_handler.bind(this);\n      this.container.onpointercancel = this.pointerup_handler.bind(this);\n      this.container.onpointerout = this.pointerup_handler.bind(this);\n      this.container.onpointerleave = this.pointerup_handler.bind(this);\n      this.clearHistory();\n      this.load();\n      this.addHistory();\n    }\n    /* Mobile zoom */\n\n  }, {\n    key: \"pointerdown_handler\",\n    value: function pointerdown_handler(ev) {\n      this.evCache.push(ev);\n    }\n  }, {\n    key: \"pointermove_handler\",\n    value: function pointermove_handler(ev) {\n      for (var i = 0; i < this.evCache.length; i++) {\n        if (ev.pointerId == this.evCache[i].pointerId) {\n          this.evCache[i] = ev;\n          break;\n        }\n      }\n\n      if (this.evCache.length == 2) {\n        // Calculate the distance between the two pointers\n        var curDiff = Math.abs(this.evCache[0].clientX - this.evCache[1].clientX);\n\n        if (this.prevDiff > 100) {\n          if (curDiff > this.prevDiff) {\n            // The distance between the two pointers has increased\n            this.zoom_in();\n          }\n\n          if (curDiff < this.prevDiff) {\n            // The distance between the two pointers has decreased\n            this.zoom_out();\n          }\n        }\n\n        this.prevDiff = curDiff;\n      }\n    }\n  }, {\n    key: \"pointerup_handler\",\n    value: function pointerup_handler(ev) {\n      this.remove_event(ev);\n\n      if (this.evCache.length < 2) {\n        this.prevDiff = -1;\n      }\n    }\n  }, {\n    key: \"remove_event\",\n    value: function remove_event(ev) {\n      // Remove this event from the target's cache\n      for (var i = 0; i < this.evCache.length; i++) {\n        if (this.evCache[i].pointerId == ev.pointerId) {\n          this.evCache.splice(i, 1);\n          break;\n        }\n      }\n    }\n    /* End Mobile Zoom */\n  }, {\n    key: \"contextmenuDel\",\n    value: function contextmenuDel() {\n      if (this.precanvas.getElementsByClassName(\"drawflow-delete\").length) {\n        this.precanvas.getElementsByClassName(\"drawflow-delete\")[0].parentElement.removeChild(this.precanvas.getElementsByClassName(\"drawflow-delete\")[0]);\n      }\n    }\n  }, {\n    key: \"load\",\n    value: function load() {\n      this.preventHistoryEvent = true;\n      for (var key in this.drawflow.drawflow[this.module].data) {\n        this.addNodeImport(this.drawflow.drawflow[this.module].data[key], this.precanvas);\n      }\n\n      if (this.reroute) {\n        for (var key in this.drawflow.drawflow[this.module].data) {\n          this.addRerouteImport(this.drawflow.drawflow[this.module].data[key]);\n        }\n      }\n\n      for (var key in this.drawflow.drawflow[this.module].data) {\n        this.updateConnectionNodes('node-' + key);\n      }\n\n      var editor = this.drawflow.drawflow;\n      var number = 1;\n      Object.keys(editor).map(function (moduleName, index) {\n        Object.keys(editor[moduleName].data).map(function (id, index2) {\n          if (parseInt(id) >= number) {\n            number = parseInt(id) + 1;\n          }\n        });\n      });\n      this.nodeId = number;\n      this.update_container_size(null, true);\n\n      var data = this.drawflow.drawflow[this.module].data,\n          dataQa = new Array(),\n          dataScenario = new Array();\n      $.each(data, function (index, value) {\n        if (index.substr(0, 1) == 'q') {\n          dataQa.push(value);\n        }\n        if (index.substr(0, 1) == 's') {\n          dataScenario.push(value);\n        }\n      });\n      dataQa.sort(function (a, b) {\n        if (a.pos_x == b.pos_x) {\n          return a.pos_y - b.pos_y;\n        }\n        return a.pos_x - b.pos_x;\n      });\n      dataScenario.sort(function (a, b) {\n        if (a.pos_x == b.pos_x) {\n          return a.pos_y - b.pos_y;\n        }\n        return a.pos_x - b.pos_x;\n      });\n      var data_drawflow = dataQa.concat(dataScenario);\n      if (data_drawflow.length > 0) {\n        var obj_data_drawflow = {};\n        $.each(data_drawflow, function (index, value) {\n          obj_data_drawflow[value.id] = value;\n        });\n        this.drawflow.drawflow[this.module].data = obj_data_drawflow;\n      }\n      this.showDataToLeft();\n      this.preventHistoryEvent = false;\n    }\n  }, {\n    key: \"removeReouteConnectionSelected\",\n    value: function removeReouteConnectionSelected() {\n      if (this.reroute_fix_curvature) {\n        this.connection_selected.parentElement.querySelectorAll(\".main-path\").forEach(function (item, i) {\n          item.classList.remove(\"selected\");\n        });\n      }\n    }\n  }, {\n    key: \"closest\",\n    value: function closest(el, selector) {\n      var matchesFn;\n\n      // find vendor prefix\n      ['matches', 'webkitMatchesSelector', 'mozMatchesSelector', 'msMatchesSelector', 'oMatchesSelector'].some(function (fn) {\n        if (typeof document.body[fn] == 'function') {\n          matchesFn = fn;\n          return true;\n        }\n        return false;\n      });\n\n      var parent;\n\n      // traverse parents\n      while (el) {\n        parent = el.parentElement;\n        if (parent && parent[matchesFn](selector)) {\n          return parent;\n        }\n        el = parent;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"click\",\n    value: function click(e) {\n      var names_arr = ['output', 'parent-drawflow', 'drawflow', 'main-path', 'point', 'drawflow-delete'];\n      if (this.editor_mode === 'fixed') {\n        //return false;\n        if (e.target.classList[0] === 'parent-drawflow' || e.target.classList[0] === 'drawflow') {\n          this.ele_selected = e.target.closest(\".parent-drawflow\");\n        } else {\n          return false;\n        }\n      } else {\n        this.first_click = e.target;\n        this.ele_selected = e.target;\n\n        if (e.button === 0) {\n          this.contextmenuDel();\n        }\n      }\n\n      if (names_arr.indexOf(e.target.getAttribute('class')) != -1) {\n        this.ele_selected = e.target;\n      } else {\n        if (e.target.parentNode.getAttribute('class') == 'drawflow') {\n          this.ele_selected = e.target;\n        }\n        if (e.target.parentNode.parentNode.getAttribute('class') == 'drawflow_content_node' && e.target.parentNode.parentNode != null) {\n          this.ele_selected = e.target.parentNode.parentNode.parentNode;\n        }\n      }\n      var classList = this.ele_selected ? this.ele_selected.getAttribute('class').split(\" \") : [];\n      if (this.ele_selected && classList[1]) {\n        if (classList[1]) {\n          if (classList[1] == 'editor-scenario') {\n            $('.tabscenario').addClass('active');\n            $('.tabqa').removeClass('active');\n            $('.tabscenario').children().attr('aria-expanded', true);\n            $('.tabqa').children().attr('aria-expanded', false);\n            $('#scenario').addClass('active');\n            $('#QA').removeClass('active');\n          }\n          if (classList[1] == 'editor-qa') {\n            $('.tabscenario').removeClass('active');\n            $('.tabqa').addClass('active');\n            $('.tabscenario').children().attr('aria-expanded', false);\n            $('.tabqa').children().attr('aria-expanded', true);\n            $('#scenario').removeClass('active');\n            $('#QA').addClass('active');\n          }\n        }\n      }\n      $('.connection').map(function (i, val) {\n        if (val && val.childNodes.length > 0 && val.childNodes[0].tagName == 'path') {\n          val.childNodes[0].setAttribute(\"class\", val.childNodes[0].getAttribute(\"class\").replace(\" target-trigger\", \"\"));\n          $(val).css('z-index', '0');\n        }\n      });\n      // console.log(this.ele_selected)\n      switch (classList[0]) {\n        case 'drawflow-node':\n          if (this.node_selected != null) {\n            //this.node_selected.classList.remove(\"selected\");\n            $(this.node_selected).removeClass(\"selected\");\n          }\n\n          if (this.connection_selected != null) {\n            //this.connection_selected.classList.remove(\"selected\");\n            $(this.connection_selected).removeClass(\"selected\");\n            this.removeReouteConnectionSelected();\n            this.connection_selected = null;\n          }\n\n          this.dispatch('nodeSelected', this.ele_selected.id.slice(5));\n          this.node_selected = this.ele_selected;\n          //this.node_selected.classList.add(\"selected\");\n          $(this.connection_selected).addClass(\"selected\");\n          this.drag = true;\n          this.focusData(this.ele_selected, true);\n          break;\n\n        case 'output':\n          this.connection = true;\n\n          if (this.node_selected != null) {\n            // this.node_selected.classList.remove(\"selected\");\n            $(this.node_selected).removeClass(\"selected\");\n            this.node_selected = null;\n          }\n\n          if (this.connection_selected != null) {\n            // this.connection_selected.classList.remove(\"selected\");\n            $(this.connection_selected).removeClass(\"selected\");\n            this.removeReouteConnectionSelected();\n            this.connection_selected = null;\n          }\n\n          this.drawConnection(e.target);\n          break;\n\n        case 'drawflow_wrap':\n        case 'parent-drawflow':\n        case 'drawflow':\n          //remove css svg and css target\n          $('.drawflow').find('.selected').removeClass(' selected');\n          $('.content-data').find('.focus-data').removeClass(' focus-data');\n          if (this.node_selected != null) {\n            // this.node_selected.classList.remove(\"selected\");\n            $(this.node_selected).removeClass(\"selected\");\n            this.node_selected = null;\n          }\n\n          if (this.connection_selected != null) {\n            // this.connection_selected.classList.remove(\"selected\");\n            $(this.connection_selected).removeClass(\"selected\");\n            this.removeReouteConnectionSelected();\n            this.connection_selected = null;\n          }\n          break;\n\n        case 'main-path':\n          var id = $('.edit-btn-scenario').val();\n          $('.edit-btn-scenario').val('');\n          if (id) {\n            $('.' + id).attr('class', $('.' + id).attr('class').replace(' focus-data', ''));\n          }\n          if (this.node_selected != null) {\n            // this.node_selected.classList.remove(\"selected\");\n            $(this.node_selected).removeClass(\"selected\");\n            this.node_selected = null;\n          }\n\n          if (this.connection_selected != null) {\n            // this.connection_selected.classList.remove(\"selected\");\n            $(this.connection_selected).removeClass(\"selected\");\n            this.removeReouteConnectionSelected();\n            this.connection_selected = null;\n          }\n\n          this.connection_selected = this.ele_selected;\n          // this.connection_selected.classList.add(\"selected\");\n          $(this.connection_selected).addClass(\"selected\");\n\n          if (this.reroute_fix_curvature) {\n            this.connection_selected.parentElement.querySelectorAll(\".main-path\").forEach(function (item, i) {\n              // item.classList.add(\"selected\");\n              $(item).addClass(\"selected\");\n            });\n          }\n\n          break;\n\n        case 'point':\n          this.drag_point = true;\n          // this.ele_selected.classList.add(\"selected\");\n          $(this.ele_selected).addClass(\"selected\");\n          break;\n\n        case 'drawflow-delete':\n          if (this.node_selected) {\n            this.removeNodeId(this.node_selected.id);\n          }\n\n          if (this.connection_selected) {\n            this.removeConnection();\n          }\n\n          if (this.node_selected != null) {\n            this.node_selected.classList.remove(\"selected\");\n            this.node_selected = null;\n          }\n\n          if (this.connection_selected != null) {\n            // this.connection_selected.classList.remove(\"selected\");\n            $(this.connection_selected).removeClass(\"selected\");\n            this.removeReouteConnectionSelected();\n            this.connection_selected = null;\n          }\n\n          break;\n\n        default:\n      }\n\n      if (e.type === \"touchstart\") {\n        this.pos_x = e.touches[0].clientX;\n        this.pos_y = e.touches[0].clientY;\n      } else {\n        this.pos_x = e.clientX;\n        this.pos_y = e.clientY;\n      }\n    }\n  }, {\n    key: \"autoMoveRight\",\n    value: function autoMoveRight() {\n      if (!this.movingX) {\n        this.movingX = 1;\n        window.requestAnimationFrame(this.autoMoveX.bind(this));\n      }\n    }\n  }, {\n    key: \"autoMoveLeft\",\n    value: function autoMoveLeft() {\n      if (!this.movingX) {\n        this.movingX = -1;\n        window.requestAnimationFrame(this.autoMoveX.bind(this));\n      }\n    }\n  }, {\n    key: \"autoMoveX\",\n    value: function autoMoveX(timestamp) {\n      if (!this.movingX) return;\n      if (!this.timestampX) {\n        this.timestampX = timestamp;\n      } else {\n        var move_space = Math.round((timestamp - this.timestampX) * this.autoSpeedX / 1000 * this.movingX);\n        if (this.container.scrollLeft + move_space < 0) {\n          move_space = -this.container.scrollLeft;\n        } else if (this.container.scrollLeft + move_space > this.container.scrollWidth - this.container.clientWidth) {\n          move_space = this.container.scrollWidth - this.container.clientWidth - this.container.scrollLeft;\n        }\n        if (this.container.scrollLeft + move_space > 0) {\n          this.ele_selected.style.left = this.ele_selected.offsetLeft + move_space / this.zoom + 'px';\n          this.container.scrollLeft += move_space;\n          this.timestampX = timestamp;\n          //Update connection\n          this.updateConnectionNodes(this.ele_selected.id, this.pos_x, this.pos_y);\n        }\n      }\n      if (this.movingX) window.requestAnimationFrame(this.autoMoveX.bind(this));\n    }\n  }, {\n    key: \"autoMoveBottom\",\n    value: function autoMoveBottom() {\n      if (!this.movingY) {\n        this.movingY = 1;\n        window.requestAnimationFrame(this.autoMoveY.bind(this));\n      }\n    }\n  }, {\n    key: \"autoMoveTop\",\n    value: function autoMoveTop() {\n      if (!this.movingY) {\n        this.movingY = -1;\n        window.requestAnimationFrame(this.autoMoveY.bind(this));\n      }\n    }\n  }, {\n    key: \"autoMoveY\",\n    value: function autoMoveY(timestamp) {\n      if (!this.movingY) return;\n      if (!this.timestampY) {\n        this.timestampY = timestamp;\n      } else {\n        var move_space = Math.round((timestamp - this.timestampY) * this.autoSpeedY / 1000 * this.movingY);\n        if (this.container.scrollTop + move_space < 0) {\n          move_space = -this.container.scrollTop;\n        } else if (this.container.scrollTop + move_space > this.container.scrollHeight - this.container.clientHeight) {\n          move_space = this.container.scrollHeight - this.container.clientHeight - this.container.scrollTop;\n        }\n        if (this.container.scrollTop + move_space > 0) {\n          this.ele_selected.style.top = this.ele_selected.offsetTop + move_space / this.zoom + 'px';\n          this.container.scrollTop += move_space;\n          this.timestampY = timestamp;\n          //Update connection\n          this.updateConnectionNodes(this.ele_selected.id, this.pos_x, this.pos_y);\n        }\n      }\n      if (this.movingY) window.requestAnimationFrame(this.autoMoveY.bind(this));\n    }\n  }, {\n    key: \"position\",\n    value: function position(e) {\n      if (e.type === \"touchmove\") {\n        var e_pos_x = e.touches[0].clientX;\n        var e_pos_y = e.touches[0].clientY;\n      } else {\n        var e_pos_x = e.clientX;\n        var e_pos_y = e.clientY;\n      }\n\n      if (this.connection) {\n        this.updateConnection(e_pos_x, e_pos_y);\n      }\n\n      if (this.editor_selected) {\n        /*if (e.ctrlKey) {\r\n          this.selectElements(e_pos_x, e_pos_y);\r\n        } else { */\n        x = this.canvas_x + -(this.pos_x - e_pos_x);\n        y = this.canvas_y + -(this.pos_y - e_pos_y); // console.log(canvas_x +' - ' +pos_x + ' - '+ e_pos_x + ' - ' + x);\n\n        this.dispatch('translate', {\n          x: x,\n          y: y\n        });\n        this.precanvas.style.transform = \"translate(\" + x + \"px, \" + y + \"px) scale(\" + this.zoom + \")\"; //}\n      }\n\n      if (this.drag) {\n        var x = (this.pos_x - e_pos_x) * this.precanvas.clientWidth / (this.precanvas.clientWidth * this.zoom);\n        var y = (this.pos_y - e_pos_y) * this.precanvas.clientHeight / (this.precanvas.clientHeight * this.zoom);\n        this.pos_x = e_pos_x;\n        this.pos_y = e_pos_y;\n        this.ele_selected.style.top = this.ele_selected.offsetTop - y + \"px\";\n        this.ele_selected.style.left = this.ele_selected.offsetLeft - x + \"px\";\n        this.drawflow.drawflow[this.module].data[this.ele_selected.id.slice(5)].pos_x = this.ele_selected.offsetLeft - x;\n        this.drawflow.drawflow[this.module].data[this.ele_selected.id.slice(5)].pos_y = this.ele_selected.offsetTop - y;\n        this.updateConnectionNodes(this.ele_selected.id, e_pos_x, e_pos_y);\n\n        var container_rect = this.container.getBoundingClientRect();\n        if (e.clientX > container_rect.right - this.autoRange) {\n          this.autoSpeedX = (e.clientX - (container_rect.right - this.autoRange)) * 10;\n          this.autoMoveRight();\n        } else if (e.clientX < container_rect.left + this.autoRange) {\n          this.autoSpeedX = (container_rect.left + this.autoRange - e.clientX) * 10;\n          this.autoMoveLeft();\n        } else {\n          this.movingX = 0;\n        }\n        // console.log(e.clientY,container_rect.top,container_rect.bottom)\n        if (e.clientY > container_rect.bottom - this.autoRange) {\n          this.autoSpeedY = (e.clientY - (container_rect.bottom - this.autoRange)) * 10;\n          this.autoMoveBottom();\n        } else if (e.clientY < container_rect.top + this.autoRange) {\n          this.autoSpeedY = (container_rect.top + this.autoRange - e.clientY) * 10;\n          this.autoMoveTop();\n        } else {\n          this.movingY = 0;\n        }\n      }\n\n      if (this.drag_point) {\n        var x = (this.pos_x - e_pos_x) * this.precanvas.clientWidth / (this.precanvas.clientWidth * this.zoom);\n        var y = (this.pos_y - e_pos_y) * this.precanvas.clientHeight / (this.precanvas.clientHeight * this.zoom);\n        this.pos_x = e_pos_x;\n        this.pos_y = e_pos_y;\n        var pos_x = this.pos_x * (this.precanvas.clientWidth / (this.precanvas.clientWidth * this.zoom)) - this.precanvas.getBoundingClientRect().x * (this.precanvas.clientWidth / (this.precanvas.clientWidth * this.zoom));\n        var pos_y = this.pos_y * (this.precanvas.clientHeight / (this.precanvas.clientHeight * this.zoom)) - this.precanvas.getBoundingClientRect().y * (this.precanvas.clientHeight / (this.precanvas.clientHeight * this.zoom));\n        this.ele_selected.setAttributeNS(null, 'cx', pos_x);\n        this.ele_selected.setAttributeNS(null, 'cy', pos_y);\n        var nodeUpdate = this.ele_selected.parentElement.classList[2].slice(9);\n        var nodeUpdateIn = this.ele_selected.parentElement.classList[1].slice(13);\n        var output_class = this.ele_selected.parentElement.classList[3];\n        var input_class = this.ele_selected.parentElement.classList[4];\n        var numberPointPosition = Array.from(this.ele_selected.parentElement.children).indexOf(this.ele_selected) - 1;\n\n        if (this.reroute_fix_curvature) {\n          var numberMainPath = this.ele_selected.parentElement.querySelectorAll(\".main-path\").length - 1;\n          numberPointPosition -= numberMainPath;\n\n          if (numberPointPosition < 0) {\n            numberPointPosition = 0;\n          }\n        }\n\n        var nodeId = nodeUpdate.slice(5);\n        var searchConnection = this.drawflow.drawflow[this.module].data[nodeId].outputs[output_class].connections.findIndex(function (item, i) {\n          return item.node === nodeUpdateIn && item.output === input_class;\n        });\n        this.drawflow.drawflow[this.module].data[nodeId].outputs[output_class].connections[searchConnection].points[numberPointPosition] = {\n          pos_x: pos_x,\n          pos_y: pos_y\n        };\n        var parentSelected = this.ele_selected.parentElement.classList[2].slice(9);\n        /*this.drawflow.drawflow[this.module].data[this.ele_selected.id.slice(5)].pos_x = (this.ele_selected.offsetLeft - x);\r\n        this.drawflow.drawflow[this.module].data[this.ele_selected.id.slice(5)].pos_y = (this.ele_selected.offsetTop - y);\r\n        */\n\n        this.updateConnectionNodes(parentSelected, e_pos_x, e_pos_y);\n      }\n\n      if (e.type === \"touchmove\") {\n        this.mouse_x = e_pos_x;\n        this.mouse_y = e_pos_y;\n      }\n\n      this.dispatch('mouseMove', {\n        x: e_pos_x,\n        y: e_pos_y\n      });\n    }\n  }, {\n    key: \"update_container_size\",\n    value: function update_container_size(callback, fit) {\n      var overflow_w = 0,\n          overflow_h = 0,\n          zoom = this.zoom,\n          precanvas_wrap = $(this.precanvas_wrap),\n          container = $(this.container);\n      if (Object.keys(this.drawflow.drawflow[this.module].data).length === 0) {\n        precanvas_wrap.css({\n          width: '100%',\n          height: '100%'\n        });\n      } else {\n        container.find('.drawflow-node').each(function () {\n          if (fit) {\n            overflow_w = Math.max(overflow_w, $(this).position().left + $(this).outerWidth() * zoom + 50);\n            overflow_h = Math.max(overflow_h, $(this).position().top + $(this).outerHeight() * zoom + 50);\n          } else {\n            if ($(this).position().top + $(this).outerHeight() * zoom + 50 > precanvas_wrap.outerHeight()) {\n              overflow_h = container.outerHeight();\n            }\n            if ($(this).position().left + $(this).outerWidth() * zoom + 50 > precanvas_wrap.outerWidth()) {\n              overflow_w = container.outerWidth();\n            }\n          }\n        });\n        if (overflow_h || overflow_w) {\n          //console.log(fit,overflow_h,overflow_w)\n          if (fit) {\n            precanvas_wrap.css({\n              width: this.change_full_px_to_100_percent(overflow_w + this.canvas_x, container.outerWidth()),\n              height: this.change_full_px_to_100_percent(overflow_h + this.canvas_y, container.outerHeight())\n            });\n          } else {\n            precanvas_wrap.css({\n              width: this.change_full_px_to_100_percent(precanvas_wrap.outerWidth() + overflow_w, container.outerWidth()),\n              height: this.change_full_px_to_100_percent(precanvas_wrap.outerHeight() + overflow_h, container.outerHeight())\n            });\n            this.update_container_size();\n          }\n          if (callback) callback();\n        }\n      }\n    }\n  }, {\n    key: \"change_full_px_to_100_percent\", //Misc function\n    value: function change_full_px_to_100_percent(new_value, current_value) {\n      return current_value >= new_value ? '100%' : new_value;\n    }\n  }, {\n    key: \"dragEnd\",\n    value: function dragEnd(e) {\n      if (this.select_elements != null) {\n        this.select_elements.parentNode.removeChild(this.select_elements);\n        this.select_elements = null;\n      }\n\n      if (e.type === \"touchend\") {\n        var e_pos_x = this.mouse_x;\n        var e_pos_y = this.mouse_y;\n        var ele_last = document.elementFromPoint(e_pos_x, e_pos_y);\n      } else {\n        var e_pos_x = e.clientX;\n        var e_pos_y = e.clientY;\n        var ele_last = e.target;\n      }\n\n      if (this.drag) {\n        var elem = $(this.ele_selected),\n            container = $(this.container);\n        this.update_container_size(function () {\n          container.animate({\n            scrollTop: elem.position().top * 1 - (container.outerHeight() - elem.height()) / 2,\n            scrollLeft: elem.position().left * 1 - (container.outerWidth() - elem.width()) / 2\n          }, {\n            duration: 300\n          });\n        });\n\n        this.dispatch('nodeMoved', this.ele_selected.id.slice(5));\n        this.addHistory();\n      }\n\n      if (this.drag_point) {\n        this.ele_selected.classList.remove(\"selected\");\n      }\n\n      if (this.editor_selected) {\n        this.canvas_x = this.canvas_x + -(this.pos_x - e_pos_x);\n        this.canvas_y = this.canvas_y + -(this.pos_y - e_pos_y);\n        this.editor_selected = false;\n      }\n\n      if (this.connection === true) {\n        //console.log(ele_last);\n        var classList = ele_last.getAttribute('class').split(\" \");\n        if (classList[0] === 'input' || this.force_first_input && (ele_last.closest(\".drawflow_content_node\") != null || classList[0] === 'drawflow-node')) {\n          if (this.force_first_input && (ele_last.closest(\".drawflow_content_node\") != null || classList[0] === 'drawflow-node')) {\n            if (ele_last.closest(\".drawflow_content_node\") != null) {\n              var input_id = ele_last.closest(\".drawflow_content_node\").parentElement.id;\n            } else {\n              var input_id = ele_last.id;\n            }\n\n            var input_class = \"input_1\";\n          } else {\n            // Fix connection;\n            var input_id = ele_last.parentElement.parentElement.id;\n            var input_class = ele_last.classList[1];\n          }\n\n          if (this.ele_selected == null) {\n            return false;\n          }\n\n          var output_id = this.ele_selected.parentElement.parentElement.id;\n          var output_class = this.ele_selected.classList[1];\n\n          if (output_id !== input_id) {\n            if (this.container.querySelectorAll('.connection.node_in_' + input_id + '.node_out_' + output_id + '.' + output_class + '.' + input_class).length === 0) {\n              // Conection no exist save connection\n              this.connection_ele.setAttribute('class', 'connection' + ' node_in_' + input_id + ' node_out_' + output_id + ' ' + output_class + ' ' + input_class);\n              // this.connection_ele.classList.add(\"node_in_\" + input_id);\n              // this.connection_ele.classList.add(\"node_out_\" + output_id);\n              // this.connection_ele.classList.add(output_class);\n              // this.connection_ele.classList.add(input_class);\n              var id_input = input_id.slice(5);\n              var id_output = output_id.slice(5);\n              arr_insert_relation.push(id_input + ' ' + id_output);\n              this.drawflow.drawflow[this.module].data[id_output].outputs[output_class].connections.push({\n                \"node\": id_input,\n                \"output\": input_class\n              });\n              this.drawflow.drawflow[this.module].data[id_input].inputs[input_class].connections.push({\n                \"node\": id_output,\n                \"input\": output_class\n              });\n              this.updateConnectionNodes('node-' + id_output);\n              this.updateConnectionNodes('node-' + id_input);\n              this.dispatch('connectionCreated', {\n                output_id: id_output,\n                input_id: id_input,\n                output_class: output_class,\n                input_class: input_class\n              });\n            } else {\n              this.connection_ele.parentNode.removeChild(this.connection_ele);\n            }\n\n            this.connection_ele = null;\n            this.addHistory();\n          } else {\n            // Connection exists Remove Connection;\n            this.connection_ele.parentNode.removeChild(this.connection_ele);\n            this.connection_ele = null;\n          }\n        } else {\n          // Remove Connection;\n          if (this.connection_ele != null) {\n            this.connection_ele.parentNode.removeChild(this.connection_ele);\n          }\n          this.connection_ele = null;\n        }\n      }\n\n      this.drag = false;\n      this.drag_point = false;\n      this.connection = false;\n      this.ele_selected = null;\n      this.editor_selected = false;\n\n      //End move\n      this.movingX = 0;\n      this.movingY = 0;\n      this.timestampX = 0;\n      this.timestampY = 0;\n    }\n  }, {\n    key: \"contextmenu\",\n    value: function contextmenu(e) {\n      e.preventDefault();\n\n      if (this.editor_mode === 'fixed') {\n        return false;\n      }\n\n      if (this.precanvas.getElementsByClassName(\"drawflow-delete\").length) {\n        //this.precanvas.getElementsByClassName(\"drawflow-delete\")[0].remove();\n        this.precanvas.getElementsByClassName(\"drawflow-delete\")[0].parentNode.removeChild(this.precanvas.getElementsByClassName(\"drawflow-delete\")[0]);\n      }\n\n      ;\n\n      if (this.node_selected || this.connection_selected) {\n        var deletebox = document.createElement('div');\n        $(deletebox).addClass(\"drawflow-delete\");\n        deletebox.innerHTML = \"x\";\n\n        if (this.node_selected) {\n          this.node_selected.appendChild(deletebox);\n        }\n\n        if (this.connection_selected) {\n          deletebox.style.top = e.clientY * (this.precanvas.clientHeight / (this.precanvas.clientHeight * this.zoom)) - this.precanvas.getBoundingClientRect().top * (this.precanvas.clientHeight / (this.precanvas.clientHeight * this.zoom)) + \"px\";\n          deletebox.style.left = e.clientX * (this.precanvas.clientWidth / (this.precanvas.clientWidth * this.zoom)) - this.precanvas.getBoundingClientRect().left * (this.precanvas.clientWidth / (this.precanvas.clientWidth * this.zoom)) + \"px\";\n          this.precanvas.appendChild(deletebox);\n        }\n      }\n    }\n  }, {\n    key: \"key\",\n    value: function key(e) {\n      if (this.editor_mode === 'fixed') {\n        return false;\n      }\n\n      if (e.key === 'Del' || e.key === 'Delete' || e.key === 'Backspace' && e.metaKey) {\n        if (this.node_selected != null) {\n          if (this.first_click.tagName !== 'INPUT' && this.first_click.tagName !== 'TEXTAREA' && this.first_click.hasAttribute('contenteditable') !== true) {\n            this.removeNodeId(this.node_selected.id);\n          }\n        }\n\n        if (this.connection_selected != null) {\n          this.removeConnection();\n        }\n      }\n    }\n  }, {\n    key: \"zoom_enter\",\n    value: function zoom_enter(event, delta) {\n      if (event.ctrlKey) {\n        event.preventDefault();\n\n        if (event.deltaY > 0) {\n          // Zoom Out\n          this.zoom_out('zoom_out');\n        } else {\n          // Zoom In\n          this.zoom_in('zoom_in');\n        } //this.precanvas.style.transform = \"translate(\"+this.canvas_x+\"px, \"+this.canvas_y+\"px) scale(\"+this.zoom+\")\";\n      }\n    }\n  }, {\n    key: \"zoom_refresh\",\n    value: function zoom_refresh(zoom) {\n      switch (zoom) {\n        case 'zoom_out':\n          this.canvas_x += 10;\n          this.canvas_y += 10;\n          break;\n        case 'zoom_in':\n          this.canvas_x -= 10;\n          this.canvas_y -= 10;\n          break;\n        default:\n          this.canvas_x = 0;\n          this.canvas_y = 0;\n          break;\n      }\n      this.dispatch('zoom', this.zoom);\n      this.precanvas.style.transform = \"translate(\" + this.canvas_x + \"px, \" + this.canvas_y + \"px) scale(\" + this.zoom + \")\";\n      this.update_container_size(null, true);\n    }\n  }, {\n    key: \"zoom_in\",\n    value: function zoom_in() {\n      if (this.zoom < this.zoom_max) {\n        this.zoom += 0.1;\n        this.zoom_refresh('zoom_in');\n      }\n    }\n  }, {\n    key: \"zoom_out\",\n    value: function zoom_out() {\n      if (this.zoom > this.zoom_min) {\n        this.zoom -= 0.1;\n        this.zoom_refresh('zoom_out');\n      }\n    }\n  }, {\n    key: \"zoom_reset\",\n    value: function zoom_reset() {\n      if (this.zoom != 1) {\n        this.zoom = 1;\n        this.zoom_refresh();\n      }\n    }\n  }, {\n    key: \"createCurvature\",\n    value: function createCurvature(start_pos_x, start_pos_y, end_pos_x, end_pos_y, curvature_value, type) {\n      var line_x = start_pos_x;\n      var line_y = start_pos_y;\n      var x = end_pos_x;\n      var y = end_pos_y;\n      var curvature = curvature_value; //type openclose open close other\n\n      switch (type) {\n        case 'open':\n          if (start_pos_x >= end_pos_x) {\n            var hx1 = line_x + Math.abs(x - line_x) * curvature;\n            var hx2 = x - Math.abs(x - line_x) * (curvature * -1);\n          } else {\n            var hx1 = line_x + Math.abs(x - line_x) * curvature;\n            var hx2 = x - Math.abs(x - line_x) * curvature;\n          }\n\n          return ' M ' + line_x + ' ' + line_y + ' C ' + hx1 + ' ' + line_y + ' ' + hx2 + ' ' + y + ' ' + x + '  ' + y;\n          break;\n\n        case 'close':\n          if (start_pos_x >= end_pos_x) {\n            var hx1 = line_x + Math.abs(x - line_x) * (curvature * -1);\n            var hx2 = x - Math.abs(x - line_x) * curvature;\n          } else {\n            var hx1 = line_x + Math.abs(x - line_x) * curvature;\n            var hx2 = x - Math.abs(x - line_x) * curvature;\n          }\n\n          return ' M ' + line_x + ' ' + line_y + ' C ' + hx1 + ' ' + line_y + ' ' + hx2 + ' ' + y + ' ' + x + '  ' + y;\n          break;\n\n        case 'other':\n          if (start_pos_x >= end_pos_x) {\n            var hx1 = line_x + Math.abs(x - line_x) * (curvature * -1);\n            var hx2 = x - Math.abs(x - line_x) * (curvature * -1);\n          } else {\n            var hx1 = line_x + Math.abs(x - line_x) * curvature;\n            var hx2 = x - Math.abs(x - line_x) * curvature;\n          }\n\n          return ' M ' + line_x + ' ' + line_y + ' C ' + hx1 + ' ' + line_y + ' ' + hx2 + ' ' + y + ' ' + x + '  ' + y;\n          break;\n\n        default:\n          var hx1 = line_x + Math.abs(x - line_x) * curvature;\n          var hx2 = x - Math.abs(x - line_x) * curvature;\n          return ' M ' + line_x + ' ' + line_y + ' C ' + hx1 + ' ' + line_y + ' ' + hx2 + ' ' + y + ' ' + x + '  ' + y;\n      }\n    }\n  }, {\n    key: \"drawConnection\",\n    value: function drawConnection(ele) {\n      var connection = document.createElementNS('http://www.w3.org/2000/svg', \"svg\");\n      this.connection_ele = connection;\n      var path = document.createElementNS('http://www.w3.org/2000/svg', \"path\");\n      path.setAttribute('class', 'main-path');\n      path.setAttributeNS(null, 'd', ''); // path.innerHTML = 'a';\n\n      //connection.classList.add(\"connection\");\n      connection.setAttribute('class', 'connection');\n      connection.appendChild(path);\n      this.precanvas.appendChild(connection);\n    }\n  }, {\n    key: \"updateConnection\",\n    value: function updateConnection(eX, eY) {\n      //var path = this.connection_ele.children[0];\n      var path = this.connection_ele.firstElementChild;\n      var line_x = this.ele_selected.offsetWidth / 2 + this.line_path / 2 + this.ele_selected.parentElement.parentElement.offsetLeft + this.ele_selected.offsetLeft;\n      var line_y = this.ele_selected.offsetHeight / 2 + this.line_path / 2 + this.ele_selected.parentElement.parentElement.offsetTop + this.ele_selected.offsetTop;\n      // var x = eX * (this.precanvas.clientWidth / (this.precanvas.clientWidth * this.zoom)) - this.precanvas.getBoundingClientRect().x * (this.precanvas.clientWidth / (this.precanvas.clientWidth * this.zoom));\n      // var y = eY * (this.precanvas.clientHeight / (this.precanvas.clientHeight * this.zoom)) - this.precanvas.getBoundingClientRect().y * (this.precanvas.clientHeight / (this.precanvas.clientHeight * this.zoom));\n      var x = eX * (this.precanvas.clientWidth / (this.precanvas.clientWidth * this.zoom)) - this.precanvas.getBoundingClientRect().left * (this.precanvas.clientWidth / (this.precanvas.clientWidth * this.zoom));\n      var y = eY * (this.precanvas.clientHeight / (this.precanvas.clientHeight * this.zoom)) - this.precanvas.getBoundingClientRect().top * (this.precanvas.clientHeight / (this.precanvas.clientHeight * this.zoom));\n      /*\r\n      var curvature = 0.5;\r\n      var hx1 = line_x + Math.abs(x - line_x) * curvature;\r\n      var hx2 = x - Math.abs(x - line_x) * curvature;\r\n      */\n      //path.setAttributeNS(null, 'd', 'M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y);\n\n      var curvature = this.curvature;\n      var lineCurve = this.createCurvature(line_x, line_y, x, y, curvature, 'openclose');\n      path.setAttributeNS(null, 'd', lineCurve);\n    }\n    // }, {\n    //   key: \"addConnection\",\n    //   value: function addConnection(id_output, id_input, output_class, input_class) {\n    //     var nodeOneModule = this.getModuleFromNodeId(id_output);\n    //     var nodeTwoModule = this.getModuleFromNodeId(id_input);\n\n    //     if (nodeOneModule === nodeTwoModule) {\n    //       var dataNode = this.getNodeFromId(id_output);\n    //       var exist = false;\n\n    //       for (var checkOutput in dataNode.outputs[output_class].connections) {\n    //         var connectionSearch = dataNode.outputs[output_class].connections[checkOutput];\n\n    //         if (connectionSearch.node == id_input && connectionSearch.output == input_class) {\n    //           exist = true;\n    //         }\n    //       } // Check connection exist\n\n\n    //       if (exist === false) {\n    //         //Create Connection\n    //         this.drawflow.drawflow[nodeOneModule].data[id_output].outputs[output_class].connections.push({\n    //           \"node\": id_input,\n    //           \"output\": input_class\n    //         });\n    //         this.drawflow.drawflow[nodeOneModule].data[id_input].inputs[input_class].connections.push({\n    //           \"node\": id_output,\n    //           \"input\": output_class\n    //         });\n\n    //         if (this.module === nodeOneModule) {\n    //           //Draw connection\n    //           var connection = document.createElementNS('http://www.w3.org/2000/svg', \"svg\");\n    //           var path = document.createElementNS('http://www.w3.org/2000/svg', \"path\");\n    //           path.classList.add(\"main-path\");\n    //           path.setAttributeNS(null, 'd', ''); // path.innerHTML = 'a';\n\n    //           connection.classList.add(\"connection\");\n    //           connection.classList.add(\"node_in_node-\" + id_input);\n    //           connection.classList.add(\"node_out_node-\" + id_output);\n    //           connection.classList.add(output_class);\n    //           connection.classList.add(input_class);\n    //           connection.appendChild(path);\n    //           this.precanvas.appendChild(connection);\n    //           this.updateConnectionNodes('node-' + id_output);\n    //           this.updateConnectionNodes('node-' + id_input);\n    //         }\n\n    //         this.dispatch('connectionCreated', {\n    //           output_id: id_output,\n    //           input_id: id_input,\n    //           output_class: output_class,\n    //           input_class: input_class\n    //         });\n    //       }\n    //     }\n    //   }\n  }, {\n    key: \"updateConnectionNodes\",\n    value: function updateConnectionNodes(id) {\n      // Aquí nos quedamos;\n      var idSearch = 'node_in_' + id;\n      var idSearchOut = 'node_out_' + id;\n      var line_path = this.line_path / 2;\n      var precanvas = this.precanvas;\n      var curvature = this.curvature;\n      var createCurvature = this.createCurvature;\n      var reroute_curvature = this.reroute_curvature;\n      var reroute_curvature_start_end = this.reroute_curvature_start_end;\n      var reroute_fix_curvature = this.reroute_fix_curvature;\n      var rerouteWidth = this.reroute_width;\n      var zoom = this.zoom;\n      var elemsOut = document.getElementsByClassName(idSearchOut);\n      Object.keys(elemsOut).map(function (item, index) {\n        if (elemsOut[item].querySelector('.point') === null) {\n          var elemtsearchId_out = document.getElementById(id);\n          var classList = elemsOut[item].getAttribute('class').split(\" \");\n          var id_search = classList[1].replace('node_in_', '');\n          var elemtsearchId = document.getElementById(id_search);\n          var elemtsearch = elemtsearchId.querySelectorAll('.' + classList[4])[0];\n          var eX = elemtsearch.offsetWidth / 2 + line_path + elemtsearch.parentElement.parentElement.offsetLeft + elemtsearch.offsetLeft;\n          var eY = elemtsearch.offsetHeight / 2 + line_path + elemtsearch.parentElement.parentElement.offsetTop + elemtsearch.offsetTop;\n          var line_x = elemtsearchId_out.offsetLeft + elemtsearchId_out.querySelectorAll('.' + classList[3])[0].offsetLeft + elemtsearchId_out.querySelectorAll('.' + classList[3])[0].offsetWidth / 2 + line_path;\n          var line_y = elemtsearchId_out.offsetTop + elemtsearchId_out.querySelectorAll('.' + classList[3])[0].offsetTop + elemtsearchId_out.querySelectorAll('.' + classList[3])[0].offsetHeight / 2 + line_path;\n          var x = eX;\n          var y = eY;\n          /*\r\n          var curvature = 0.5;\r\n          var hx1 = line_x + Math.abs(x - line_x) * curvature;\r\n          var hx2 = x - Math.abs(x - line_x) * curvature;\r\n          // console.log('M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y );\r\n          elemsOut[item].children[0].setAttributeNS(null, 'd', 'M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y );\r\n          */\n\n          var lineCurve = createCurvature(line_x, line_y, x, y, curvature, 'openclose');\n          elemsOut[item].firstElementChild.setAttributeNS(null, 'd', lineCurve);\n        } else {\n          var points = elemsOut[item].querySelectorAll('.point');\n          var linecurve = '';\n          var reoute_fix = [];\n          points.forEach(function (item, i) {\n            if (i === 0 && points.length - 1 === 0) {\n              // M line_x line_y C hx1 line_y hx2 y x y\n              var elemtsearchId_out = document.getElementById(id);\n              var elemtsearch = item;\n              var eX = (elemtsearch.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * (precanvas.clientWidth / (precanvas.clientWidth * zoom)) + rerouteWidth;\n              var eY = (elemtsearch.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * (precanvas.clientHeight / (precanvas.clientHeight * zoom)) + rerouteWidth;\n              var line_x = elemtsearchId_out.offsetLeft + elemtsearchId_out.querySelectorAll('.' + item.parentElement.classList[3])[0].offsetLeft + elemtsearchId_out.querySelectorAll('.' + item.parentElement.classList[3])[0].offsetWidth / 2 + line_path;\n              var line_y = elemtsearchId_out.offsetTop + elemtsearchId_out.querySelectorAll('.' + item.parentElement.classList[3])[0].offsetTop + elemtsearchId_out.querySelectorAll('.' + item.parentElement.classList[3])[0].offsetHeight / 2 + line_path;\n              var x = eX;\n              var y = eY;\n              /*var curvature = 0.5;\r\n              var hx1 = line_x + Math.abs(x - line_x) * curvature;\r\n              var hx2 = x - Math.abs(x - line_x) * curvature;\r\n              linecurve += ' M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y;*/\n\n              var lineCurveSearch = createCurvature(line_x, line_y, x, y, reroute_curvature_start_end, 'open');\n              linecurve += lineCurveSearch;\n              reoute_fix.push(lineCurveSearch); //var elemtsearchId_out = document.getElementById(id);\n\n              var elemtsearchId_out = item;\n              var id_search = item.parentElement.classList[1].replace('node_in_', '');\n              var elemtsearchId = document.getElementById(id_search);\n              var elemtsearch = elemtsearchId.querySelectorAll('.' + item.parentElement.classList[4])[0];\n              var eX = elemtsearch.offsetWidth / 2 + line_path + elemtsearch.parentElement.parentElement.offsetLeft + elemtsearch.offsetLeft;\n              var eY = elemtsearch.offsetHeight / 2 + line_path + elemtsearch.parentElement.parentElement.offsetTop + elemtsearch.offsetTop;\n              var line_x = (elemtsearchId_out.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * (precanvas.clientWidth / (precanvas.clientWidth * zoom)) + rerouteWidth;\n              var line_y = (elemtsearchId_out.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * (precanvas.clientHeight / (precanvas.clientHeight * zoom)) + rerouteWidth;\n              var x = eX;\n              var y = eY;\n              /*\r\n              var curvature = 0.5;\r\n              var hx1 = line_x + Math.abs(x - line_x) * curvature;\r\n              var hx2 = x - Math.abs(x - line_x) * curvature;\r\n              linecurve += ' M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y;\r\n              */\n\n              var lineCurveSearch = createCurvature(line_x, line_y, x, y, reroute_curvature_start_end, 'close');\n              linecurve += lineCurveSearch;\n              reoute_fix.push(lineCurveSearch);\n            } else if (i === 0) {\n              //console.log(\"Primero\");\n              // M line_x line_y C hx1 line_y hx2 y x y\n              // FIRST\n              var elemtsearchId_out = document.getElementById(id);\n              var elemtsearch = item;\n              var eX = (elemtsearch.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * (precanvas.clientWidth / (precanvas.clientWidth * zoom)) + rerouteWidth;\n              var eY = (elemtsearch.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * (precanvas.clientHeight / (precanvas.clientHeight * zoom)) + rerouteWidth;\n              var line_x = elemtsearchId_out.offsetLeft + elemtsearchId_out.querySelectorAll('.' + item.parentElement.classList[3])[0].offsetLeft + elemtsearchId_out.querySelectorAll('.' + item.parentElement.classList[3])[0].offsetWidth / 2 + line_path;\n              var line_y = elemtsearchId_out.offsetTop + elemtsearchId_out.querySelectorAll('.' + item.parentElement.classList[3])[0].offsetTop + elemtsearchId_out.querySelectorAll('.' + item.parentElement.classList[3])[0].offsetHeight / 2 + line_path;\n              var x = eX;\n              var y = eY;\n              /*\r\n              var curvature = 0.5;\r\n              var hx1 = line_x + Math.abs(x - line_x) * curvature;\r\n              var hx2 = x - Math.abs(x - line_x) * curvature;\r\n              linecurve += ' M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y;*/\n\n              var lineCurveSearch = createCurvature(line_x, line_y, x, y, reroute_curvature_start_end, 'open');\n              linecurve += lineCurveSearch;\n              reoute_fix.push(lineCurveSearch); // SECOND\n\n              var elemtsearchId_out = item;\n              var elemtsearch = points[i + 1];\n              var eX = (elemtsearch.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * (precanvas.clientWidth / (precanvas.clientWidth * zoom)) + rerouteWidth;\n              var eY = (elemtsearch.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * (precanvas.clientHeight / (precanvas.clientHeight * zoom)) + rerouteWidth;\n              var line_x = (elemtsearchId_out.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * (precanvas.clientWidth / (precanvas.clientWidth * zoom)) + rerouteWidth;\n              var line_y = (elemtsearchId_out.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * (precanvas.clientHeight / (precanvas.clientHeight * zoom)) + rerouteWidth;\n              var x = eX;\n              var y = eY;\n              /*\r\n              var curvature = reroute_curvature;\r\n              var hx1 = line_x + Math.abs(x - line_x) * curvature;\r\n              var hx2 = x - Math.abs(x - line_x) * curvature;\r\n              linecurve += ' M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y;*/\n\n              var lineCurveSearch = createCurvature(line_x, line_y, x, y, reroute_curvature, 'other');\n              linecurve += lineCurveSearch;\n              reoute_fix.push(lineCurveSearch);\n            } else if (i === points.length - 1) {\n              //console.log(\"Final\");\n              var elemtsearchId_out = item;\n              var id_search = item.parentElement.classList[1].replace('node_in_', '');\n              var elemtsearchId = document.getElementById(id_search);\n              var elemtsearch = elemtsearchId.querySelectorAll('.' + item.parentElement.classList[4])[0];\n              var eX = elemtsearch.offsetWidth / 2 + line_path + elemtsearch.parentElement.parentElement.offsetLeft + elemtsearch.offsetLeft;\n              var eY = elemtsearch.offsetHeight / 2 + line_path + elemtsearch.parentElement.parentElement.offsetTop + elemtsearch.offsetTop;\n              var line_x = (elemtsearchId_out.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * (precanvas.clientWidth / (precanvas.clientWidth * zoom)) + rerouteWidth;\n              var line_y = (elemtsearchId_out.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * (precanvas.clientHeight / (precanvas.clientHeight * zoom)) + rerouteWidth;\n              var x = eX;\n              var y = eY;\n              /*\r\n              var curvature = 0.5;\r\n              var hx1 = line_x + Math.abs(x - line_x) * curvature;\r\n              var hx2 = x - Math.abs(x - line_x) * curvature;\r\n              linecurve += ' M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y;*/\n\n              var lineCurveSearch = createCurvature(line_x, line_y, x, y, reroute_curvature_start_end, 'close');\n              linecurve += lineCurveSearch;\n              reoute_fix.push(lineCurveSearch);\n            } else {\n              var elemtsearchId_out = item;\n              var elemtsearch = points[i + 1];\n              var eX = (elemtsearch.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * (precanvas.clientWidth / (precanvas.clientWidth * zoom)) + rerouteWidth;\n              var eY = (elemtsearch.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * (precanvas.clientHeight / (precanvas.clientHeight * zoom)) + rerouteWidth;\n              var line_x = (elemtsearchId_out.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * (precanvas.clientWidth / (precanvas.clientWidth * zoom)) + rerouteWidth;\n              var line_y = (elemtsearchId_out.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * (precanvas.clientHeight / (precanvas.clientHeight * zoom)) + rerouteWidth;\n              var x = eX;\n              var y = eY;\n              /*\r\n              var curvature = reroute_curvature;\r\n              var hx1 = line_x + Math.abs(x - line_x) * curvature;\r\n              var hx2 = x - Math.abs(x - line_x) * curvature;\r\n              linecurve += ' M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y;*/\n\n              var lineCurveSearch = createCurvature(line_x, line_y, x, y, reroute_curvature, 'other');\n              linecurve += lineCurveSearch;\n              reoute_fix.push(lineCurveSearch);\n            }\n          });\n\n          if (reroute_fix_curvature) {\n            reoute_fix.forEach(function (itempath, i) {\n              elemsOut[item].children[i].setAttributeNS(null, 'd', itempath);\n            });\n          } else {\n            elemsOut[item].firstElementChild.setAttributeNS(null, 'd', linecurve);\n          }\n        }\n      });\n      var elems = document.getElementsByClassName(idSearch);\n      Object.keys(elems).map(function (item, index) {\n        // console.log(\"In\")\n        if (elems[item].querySelector('.point') === null) {\n          var elemtsearchId_in = document.getElementById(id);\n          var classList = elems[item].getAttribute('class').split(\" \");\n          var id_search = classList[2].replace('node_out_', '');\n          var elemtsearchId = document.getElementById(id_search);\n          var elemtsearch = elemtsearchId.querySelectorAll('.' + classList[3])[0];\n          var line_x = elemtsearch.offsetWidth / 2 + line_path + elemtsearch.parentElement.parentElement.offsetLeft + elemtsearch.offsetLeft;\n          var line_y = elemtsearch.offsetHeight / 2 + line_path + elemtsearch.parentElement.parentElement.offsetTop + elemtsearch.offsetTop;\n          var x = elemtsearchId_in.offsetLeft + elemtsearchId_in.querySelectorAll('.' + classList[4])[0].offsetLeft + elemtsearchId_in.querySelectorAll('.' + classList[4])[0].offsetWidth / 2 + line_path;\n          var y = elemtsearchId_in.offsetTop + elemtsearchId_in.querySelectorAll('.' + classList[4])[0].offsetTop + elemtsearchId_in.querySelectorAll('.' + classList[4])[0].offsetHeight / 2 + line_path;\n          /*\r\n          var curvature = 0.5;\r\n          var hx1 = line_x + Math.abs(x - line_x) * curvature;\r\n          var hx2 = x - Math.abs(x - line_x) * curvature;\r\n          // console.log('M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y );\r\n          elems[item].children[0].setAttributeNS(null, 'd', 'M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y );*/\n\n          var lineCurve = createCurvature(line_x, line_y, x, y, curvature, 'openclose');\n          elems[item].firstElementChild.setAttributeNS(null, 'd', lineCurve);\n        } else {\n          var points = elems[item].querySelectorAll('.point');\n          var linecurve = '';\n          var reoute_fix = [];\n          points.forEach(function (item, i) {\n            if (i === 0 && points.length - 1 === 0) {\n              // M line_x line_y C hx1 line_y hx2 y x y\n              var elemtsearchId_out = document.getElementById(id);\n              var elemtsearch = item;\n              var line_x = (elemtsearch.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * (precanvas.clientWidth / (precanvas.clientWidth * zoom)) + rerouteWidth;\n              var line_y = (elemtsearch.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * (precanvas.clientHeight / (precanvas.clientHeight * zoom)) + rerouteWidth;\n              var eX = elemtsearchId_out.offsetLeft + elemtsearchId_out.querySelectorAll('.' + item.parentElement.classList[4])[0].offsetLeft + elemtsearchId_out.querySelectorAll('.' + item.parentElement.classList[4])[0].offsetWidth / 2 + line_path;\n              var eY = elemtsearchId_out.offsetTop + elemtsearchId_out.querySelectorAll('.' + item.parentElement.classList[4])[0].offsetTop + elemtsearchId_out.querySelectorAll('.' + item.parentElement.classList[4])[0].offsetHeight / 2 + line_path;\n              var x = eX;\n              var y = eY;\n              /*\r\n              var curvature = 0.5;\r\n              var hx1 = line_x + Math.abs(x - line_x) * curvature;\r\n              var hx2 = x - Math.abs(x - line_x) * curvature;\r\n              linecurve += ' M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y;*/\n\n              var lineCurveSearch = createCurvature(line_x, line_y, x, y, reroute_curvature_start_end, 'close');\n              linecurve += lineCurveSearch;\n              reoute_fix.push(lineCurveSearch); //var elemtsearchId_out = document.getElementById(id);\n\n              var elemtsearchId_out = item;\n              var id_search = item.parentElement.classList[2].replace('node_out_', '');\n              var elemtsearchId = document.getElementById(id_search);\n              var elemtsearch = elemtsearchId.querySelectorAll('.' + item.parentElement.classList[3])[0];\n              var line_x = elemtsearch.offsetWidth / 2 + line_path + elemtsearch.parentElement.parentElement.offsetLeft + elemtsearch.offsetLeft;\n              var line_y = elemtsearch.offsetHeight / 2 + line_path + elemtsearch.parentElement.parentElement.offsetTop + elemtsearch.offsetTop;\n              var eX = (elemtsearchId_out.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * (precanvas.clientWidth / (precanvas.clientWidth * zoom)) + rerouteWidth;\n              var eY = (elemtsearchId_out.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * (precanvas.clientHeight / (precanvas.clientHeight * zoom)) + rerouteWidth;\n              var x = eX;\n              var y = eY;\n              /*\r\n              var curvature = 0.5;\r\n              var hx1 = line_x + Math.abs(x - line_x) * curvature;\r\n              var hx2 = x - Math.abs(x - line_x) * curvature;\r\n              linecurve += ' M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y;*/\n\n              var lineCurveSearch = createCurvature(line_x, line_y, x, y, reroute_curvature_start_end, 'open');\n              linecurve += lineCurveSearch;\n              reoute_fix.push(lineCurveSearch);\n            } else if (i === 0) {\n              // M line_x line_y C hx1 line_y hx2 y x y\n              // FIRST\n              var elemtsearchId_out = item;\n              var id_search = item.parentElement.classList[2].replace('node_out_', '');\n              var elemtsearchId = document.getElementById(id_search);\n              var elemtsearch = elemtsearchId.querySelectorAll('.' + item.parentElement.classList[3])[0];\n              var line_x = elemtsearch.offsetWidth / 2 + line_path + elemtsearch.parentElement.parentElement.offsetLeft + elemtsearch.offsetLeft;\n              var line_y = elemtsearch.offsetHeight / 2 + line_path + elemtsearch.parentElement.parentElement.offsetTop + elemtsearch.offsetTop;\n              var eX = (elemtsearchId_out.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * (precanvas.clientWidth / (precanvas.clientWidth * zoom)) + rerouteWidth;\n              var eY = (elemtsearchId_out.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * (precanvas.clientHeight / (precanvas.clientHeight * zoom)) + rerouteWidth;\n              var x = eX;\n              var y = eY;\n              /*\r\n              var curvature = 0.5;\r\n              var hx1 = line_x + Math.abs(x - line_x) * curvature;\r\n              var hx2 = x - Math.abs(x - line_x) * curvature;\r\n              linecurve += ' M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y;*/\n\n              var lineCurveSearch = createCurvature(line_x, line_y, x, y, reroute_curvature_start_end, 'open');\n              linecurve += lineCurveSearch;\n              reoute_fix.push(lineCurveSearch); // SECOND\n\n              var elemtsearchId_out = item;\n              var elemtsearch = points[i + 1];\n              var eX = (elemtsearch.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * (precanvas.clientWidth / (precanvas.clientWidth * zoom)) + rerouteWidth;\n              var eY = (elemtsearch.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * (precanvas.clientHeight / (precanvas.clientHeight * zoom)) + rerouteWidth;\n              var line_x = (elemtsearchId_out.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * (precanvas.clientWidth / (precanvas.clientWidth * zoom)) + rerouteWidth;\n              var line_y = (elemtsearchId_out.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * (precanvas.clientHeight / (precanvas.clientHeight * zoom)) + rerouteWidth;\n              var x = eX;\n              var y = eY;\n              /*\r\n              var curvature = reroute_curvature;\r\n              var hx1 = line_x + Math.abs(x - line_x) * curvature;\r\n              var hx2 = x - Math.abs(x - line_x) * curvature;\r\n              linecurve += ' M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y;*/\n\n              var lineCurveSearch = createCurvature(line_x, line_y, x, y, reroute_curvature, 'other');\n              linecurve += lineCurveSearch;\n              reoute_fix.push(lineCurveSearch);\n            } else if (i === points.length - 1) {\n              var elemtsearchId_out = item;\n              var id_search = item.parentElement.classList[1].replace('node_in_', '');\n              var elemtsearchId = document.getElementById(id_search);\n              var elemtsearch = elemtsearchId.querySelectorAll('.' + item.parentElement.classList[4])[0];\n              var eX = elemtsearch.offsetWidth / 2 + line_path + elemtsearch.parentElement.parentElement.offsetLeft + elemtsearch.offsetLeft;\n              var eY = elemtsearch.offsetHeight / 2 + line_path + elemtsearch.parentElement.parentElement.offsetTop + elemtsearch.offsetTop;\n              var line_x = (elemtsearchId_out.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * (precanvas.clientWidth / (precanvas.clientWidth * zoom)) + rerouteWidth;\n              var line_y = (elemtsearchId_out.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * (precanvas.clientHeight / (precanvas.clientHeight * zoom)) + rerouteWidth;\n              var x = eX;\n              var y = eY;\n              /*\r\n              var curvature = 0.5;\r\n              var hx1 = line_x + Math.abs(x - line_x) * curvature;\r\n              var hx2 = x - Math.abs(x - line_x) * curvature;\r\n              linecurve += ' M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y;*/\n\n              var lineCurveSearch = createCurvature(line_x, line_y, x, y, reroute_curvature_start_end, 'close');\n              linecurve += lineCurveSearch;\n              reoute_fix.push(lineCurveSearch);\n            } else {\n              var elemtsearchId_out = item;\n              var elemtsearch = points[i + 1];\n              var eX = (elemtsearch.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * (precanvas.clientWidth / (precanvas.clientWidth * zoom)) + rerouteWidth;\n              var eY = (elemtsearch.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * (precanvas.clientHeight / (precanvas.clientHeight * zoom)) + rerouteWidth;\n              var line_x = (elemtsearchId_out.getBoundingClientRect().x - precanvas.getBoundingClientRect().x) * (precanvas.clientWidth / (precanvas.clientWidth * zoom)) + rerouteWidth;\n              var line_y = (elemtsearchId_out.getBoundingClientRect().y - precanvas.getBoundingClientRect().y) * (precanvas.clientHeight / (precanvas.clientHeight * zoom)) + rerouteWidth;\n              var x = eX;\n              var y = eY;\n              /*\r\n              var curvature = reroute_curvature;\r\n              var hx1 = line_x + Math.abs(x - line_x) * curvature;\r\n              var hx2 = x - Math.abs(x - line_x) * curvature;\r\n              linecurve += ' M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y;\r\n              */\n\n              var lineCurveSearch = createCurvature(line_x, line_y, x, y, reroute_curvature, 'other');\n              linecurve += lineCurveSearch;\n              reoute_fix.push(lineCurveSearch);\n            }\n          });\n\n          if (reroute_fix_curvature) {\n            reoute_fix.forEach(function (itempath, i) {\n              elems[item].children[i].setAttributeNS(null, 'd', itempath);\n            });\n          } else {\n            elems[item].children[0].setAttributeNS(null, 'd', linecurve);\n          }\n        }\n      });\n    }\n    // }, {\n    //   key: \"dblclick\",\n    //   value: function dblclick(e) {\n    //     if (this.connection_selected != null && this.reroute) {\n    //       this.createReroutePoint(this.connection_selected);\n    //     }\n\n    //     if (e.target.classList[0] === 'point') {\n    //       this.removeReroutePoint(e.target);\n    //     }\n    //   }\n  }, {\n    key: \"createReroutePoint\",\n    value: function createReroutePoint(ele) {\n      this.connection_selected.classList.remove(\"selected\");\n      var nodeUpdate = this.connection_selected.parentElement.classList[2].slice(9);\n      var nodeUpdateIn = this.connection_selected.parentElement.classList[1].slice(13);\n      var output_class = this.connection_selected.parentElement.classList[3];\n      var input_class = this.connection_selected.parentElement.classList[4];\n      this.connection_selected = null;\n      var point = document.createElementNS('http://www.w3.org/2000/svg', \"circle\");\n      point.classList.add(\"point\");\n      var pos_x = this.pos_x * (this.precanvas.clientWidth / (this.precanvas.clientWidth * this.zoom)) - this.precanvas.getBoundingClientRect().x * (this.precanvas.clientWidth / (this.precanvas.clientWidth * this.zoom));\n      var pos_y = this.pos_y * (this.precanvas.clientHeight / (this.precanvas.clientHeight * this.zoom)) - this.precanvas.getBoundingClientRect().y * (this.precanvas.clientHeight / (this.precanvas.clientHeight * this.zoom));\n      point.setAttributeNS(null, 'cx', pos_x);\n      point.setAttributeNS(null, 'cy', pos_y);\n      point.setAttributeNS(null, 'r', this.reroute_width);\n      var position_add_array_point = 0;\n\n      if (this.reroute_fix_curvature) {\n        var numberPoints = ele.parentElement.querySelectorAll(\".main-path\").length;\n        var path = document.createElementNS('http://www.w3.org/2000/svg', \"path\");\n        path.classList.add(\"main-path\");\n        path.setAttributeNS(null, 'd', '');\n        ele.parentElement.insertBefore(path, ele.parentElement.children[numberPoints]);\n\n        if (numberPoints === 1) {\n          ele.parentElement.appendChild(point);\n        } else {\n          var search_point = Array.from(ele.parentElement.children).indexOf(ele);\n          position_add_array_point = search_point;\n          ele.parentElement.insertBefore(point, ele.parentElement.children[search_point + numberPoints + 1]);\n        }\n      } else {\n        ele.parentElement.appendChild(point);\n      }\n\n      var nodeId = nodeUpdate.slice(5);\n      var searchConnection = this.drawflow.drawflow[this.module].data[nodeId].outputs[output_class].connections.findIndex(function (item, i) {\n        return item.node === nodeUpdateIn && item.output === input_class;\n      });\n\n      if (this.drawflow.drawflow[this.module].data[nodeId].outputs[output_class].connections[searchConnection].points === undefined) {\n        this.drawflow.drawflow[this.module].data[nodeId].outputs[output_class].connections[searchConnection].points = [];\n      } //this.drawflow.drawflow[this.module].data[nodeId].outputs[output_class].connections[searchConnection].points.push({ pos_x: pos_x, pos_y: pos_y });\n\n\n      if (this.reroute_fix_curvature) {\n        //console.log(position_add_array_point)\n        if (position_add_array_point > 0) {\n          this.drawflow.drawflow[this.module].data[nodeId].outputs[output_class].connections[searchConnection].points.splice(position_add_array_point, 0, {\n            pos_x: pos_x,\n            pos_y: pos_y\n          });\n        } else {\n          this.drawflow.drawflow[this.module].data[nodeId].outputs[output_class].connections[searchConnection].points.push({\n            pos_x: pos_x,\n            pos_y: pos_y\n          });\n        }\n\n        ele.parentElement.querySelectorAll(\".main-path\").forEach(function (item, i) {\n          item.classList.remove(\"selected\");\n        });\n      } else {\n        this.drawflow.drawflow[this.module].data[nodeId].outputs[output_class].connections[searchConnection].points.push({\n          pos_x: pos_x,\n          pos_y: pos_y\n        });\n      }\n      /*\r\n      this.drawflow.drawflow[this.module].data[nodeId].outputs[output_class].connections[searchConnection].points.sort((a,b) => (a.pos_x > b.pos_x) ? 1 : (b.pos_x > a.pos_x ) ? -1 : 0 );\r\n      this.drawflow.drawflow[this.module].data[nodeId].outputs[output_class].connections[searchConnection].points.forEach((item, i) => {\r\n           ele.parentElement.children[i+1].setAttributeNS(null, 'cx', item.pos_x);\r\n          ele.parentElement.children[i+1].setAttributeNS(null, 'cy', item.pos_y);\r\n      });*/\n\n      this.dispatch('addReroute', nodeId);\n      this.updateConnectionNodes(nodeUpdate);\n    }\n  }, {\n    key: \"removeReroutePoint\",\n    value: function removeReroutePoint(ele) {\n      var nodeUpdate = ele.parentElement.classList[2].slice(9);\n      var nodeUpdateIn = ele.parentElement.classList[1].slice(13);\n      var output_class = ele.parentElement.classList[3];\n      var input_class = ele.parentElement.classList[4];\n      var numberPointPosition = Array.from(ele.parentElement.children).indexOf(ele) - 1;\n      var nodeId = nodeUpdate.slice(5);\n      var searchConnection = this.drawflow.drawflow[this.module].data[nodeId].outputs[output_class].connections.findIndex(function (item, i) {\n        return item.node === nodeUpdateIn && item.output === input_class;\n      });\n\n      if (this.reroute_fix_curvature) {\n        var numberMainPath = ele.parentElement.querySelectorAll(\".main-path\").length;\n        //ele.parentElement.children[numberMainPath - 1].remove();\n        ele.parentElement.removeChild(ele.parentElement.children[numberMainPath - 1]);\n        numberPointPosition -= numberMainPath;\n\n        if (numberPointPosition < 0) {\n          numberPointPosition = 0;\n        }\n      } //console.log(numberPointPosition);\n\n\n      this.drawflow.drawflow[this.module].data[nodeId].outputs[output_class].connections[searchConnection].points.splice(numberPointPosition, 1);\n      //ele.remove();\n      ele.parentNode.removeChild(ele);\n      this.dispatch('removeReroute', nodeId);\n      this.updateConnectionNodes(nodeUpdate);\n    }\n  }, {\n    key: \"registerNode\",\n    value: function registerNode(name, html) {\n      var props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      this.noderegister[name] = {\n        html: html,\n        props: props,\n        options: options\n      };\n    }\n  }, {\n    key: \"getNodeFromId\",\n    value: function getNodeFromId(id) {\n      var moduleName = this.getModuleFromNodeId(id);\n      return JSON.parse(JSON.stringify(this.drawflow.drawflow[moduleName].data[id]));\n    }\n  }, {\n    key: \"getNodesFromName\",\n    value: function getNodesFromName(name) {\n      var nodes = [];\n      var editor = this.drawflow.drawflow;\n      Object.keys(editor).map(function (moduleName, index) {\n        for (var node in editor[moduleName].data) {\n          if (editor[moduleName].data[node].name == name) {\n            nodes.push(editor[moduleName].data[node].id);\n          }\n        }\n      });\n      return nodes;\n    }\n  }, {\n    key: \"addNode\",\n    value: function addNode(name, num_in, num_out, ele_pos_x, ele_pos_y, classoverride, data, html, typenode, id, data_res) {\n      var _this = this;\n\n      //var typenode = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : false;\n      var parent = document.createElement('div');\n      parent.classList.add(\"parent-node\");\n      var node = document.createElement('div');\n      node.innerHTML = \"\";\n      node.setAttribute(\"id\", \"node-\" + id);\n      node.classList.add(\"drawflow-node\");\n      node.setAttribute('data', data_res);\n      if (data_res) {\n        data_res = JSON.parse(data_res);\n      } else {\n        data_res = {};\n      }\n      if (classoverride != '') {\n        node.classList.add(classoverride);\n      }\n\n      var inputs = document.createElement('div');\n      inputs.classList.add(\"inputs\");\n      var outputs = document.createElement('div');\n      outputs.classList.add(\"outputs\");\n      var json_inputs = {};\n\n      for (var x = 0; x < num_in; x++) {\n        var input = document.createElement('div');\n        input.classList.add(\"input\");\n        input.classList.add(\"input_\" + (x + 1));\n        json_inputs[\"input_\" + (x + 1)] = {\n          \"connections\": []\n        };\n        inputs.appendChild(input);\n      }\n\n      var json_outputs = {};\n\n      for (var x = 0; x < num_out; x++) {\n        var output = document.createElement('div');\n        output.classList.add(\"output\");\n        output.classList.add(\"output_\" + (x + 1));\n        json_outputs[\"output_\" + (x + 1)] = {\n          \"connections\": []\n        };\n        outputs.appendChild(output);\n      }\n\n      var content = document.createElement('div');\n      content.classList.add(\"drawflow_content_node\");\n\n      if (typenode === false) {\n        content.innerHTML = html;\n      } else if (typenode === true) {\n        content.appendChild(this.noderegister[html].html.cloneNode(true));\n      } else {}\n      // var wrapper = new this.render(_objectSpread({\n      //   render: function render(h) {\n      //     return h(_this.noderegister[html].html, {\n      //       props: _this.noderegister[html].props\n      //     });\n      //   }\n      // }, this.noderegister[html].options)).$mount(); //\n\n      // content.appendChild(wrapper.$el);\n\n\n      // Object.entries(data).forEach(function (key, value) {\n      //   if (_typeof(key[1]) === \"object\") {\n      //     insertObjectkeys(null, key[0], key[0]);\n      //   } else {\n      //     var elems = content.querySelectorAll('[df-' + key[0] + ']');\n\n      //     for (var i = 0; i < elems.length; i++) {\n      //       elems[i].value = key[1];\n      //     }\n      //   }\n      // });\n\n      // function insertObjectkeys(object, name, completname) {\n      //   if (object === null) {\n      //     var object = data[name];\n      //   } else {\n      //     var object = object[name];\n      //   }\n\n      //   Object.entries(object).forEach(function (key, value) {\n      //     if (_typeof(key[1]) === \"object\") {\n      //       insertObjectkeys(object, key[0], name + '-' + key[0]);\n      //     } else {\n      //       var elems = content.querySelectorAll('[df-' + completname + '-' + key[0] + ']');\n\n      //       for (var i = 0; i < elems.length; i++) {\n      //         elems[i].value = key[1];\n      //       }\n      //     }\n      //   });\n      // }\n\n      node.appendChild(inputs);\n      node.appendChild(content);\n      node.appendChild(outputs);\n      node.style.top = ele_pos_y + \"px\";\n      node.style.left = ele_pos_x + \"px\";\n      parent.appendChild(node);\n      this.precanvas.appendChild(parent);\n      var json = {\n        id: id,\n        name: name,\n        data: data_res,\n        class: classoverride,\n        html: html,\n        typenode: typenode,\n        inputs: json_inputs,\n        outputs: json_outputs,\n        pos_x: ele_pos_x,\n        pos_y: ele_pos_y\n      };\n      this.drawflow.drawflow[this.module].data[id] = json;\n      this.dispatch('nodeCreated', id);\n      var nodeId = this.nodeId;\n      this.nodeId++;\n      this.addHistory();\n      return nodeId;\n    }\n  }, {\n    key: \"addNodeImport\",\n    value: function addNodeImport(dataNode, precanvas) {\n      var _this2 = this;\n\n      var parent = document.createElement('div');\n      parent.classList.add(\"parent-node\");\n      var node = document.createElement('div');\n      node.innerHTML = \"\";\n      node.setAttribute(\"id\", \"node-\" + dataNode.id);\n      node.setAttribute(\"data\", JSON.stringify(dataNode.data)), node.classList.add(\"drawflow-node\");\n\n      if (dataNode.class != '') {\n        node.classList.add(dataNode.class);\n      }\n\n      var inputs = document.createElement('div');\n      inputs.classList.add(\"inputs\");\n      var outputs = document.createElement('div');\n      outputs.classList.add(\"outputs\");\n      Object.keys(dataNode.inputs).map(function (input_item, index) {\n        var input = document.createElement('div');\n        input.classList.add(\"input\");\n        input.classList.add(input_item);\n        inputs.appendChild(input);\n        Object.keys(dataNode.inputs[input_item].connections).map(function (output_item, index) {\n          var connection = document.createElementNS('http://www.w3.org/2000/svg', \"svg\");\n          var path = document.createElementNS('http://www.w3.org/2000/svg', \"path\");\n          var connection_node = dataNode.id;\n          var connection_input = \"input_1\";\n\n          if (dataNode.inputs[input_item].connections[output_item].node != undefined) {\n            connection_node = dataNode.inputs[input_item].connections[output_item].node;\n          }\n          if (dataNode.inputs[input_item].connections[output_item].input != undefined) {\n            connection_input = dataNode.inputs[input_item].connections[output_item].input;\n          }\n\n          //path.classList.add(\"main-path\");\n          path.setAttribute(\"class\", \"main-path\"), path.setAttributeNS(null, 'd', ''); // path.innerHTML = 'a';\n\n          // connection.classList.add(\"connection\");\n          // connection.classList.add(\"node_in_node-\" + dataNode.id);\n          // connection.classList.add(\"node_out_node-\" + dataNode.inputs[input_item].connections[output_item].node);\n          // connection.classList.add(dataNode.inputs[input_item].connections[output_item].input);\n          // connection.classList.add(input_item);\n          connection.setAttribute(\"class\", \"connection\" + \" node_in_node-\" + dataNode.id + \" node_out_node-\" + connection_node + \" \" + connection_input + \" \" + input_item), connection.appendChild(path);\n          precanvas.appendChild(connection);\n        });\n      });\n\n      for (var x = 0; x < Object.keys(dataNode.outputs).length; x++) {\n        var output = document.createElement('div');\n        output.classList.add(\"output\");\n        output.classList.add(\"output_\" + (x + 1));\n        outputs.appendChild(output);\n      }\n\n      var content = document.createElement('div');\n      content.classList.add(\"drawflow_content_node\"); //content.innerHTML = dataNode.html;\n\n      if (dataNode.typenode === false) {\n        content.innerHTML = dataNode.html;\n      } else if (dataNode.typenode === true) {\n        content.appendChild(this.noderegister[dataNode.html].html.cloneNode(true));\n      } else {}\n      // var wrapper = new this.render(_objectSpread({\n      //   render: function render(h) {\n      //     return h(_this2.noderegister[dataNode.html].html, {\n      //       props: _this2.noderegister[dataNode.html].props\n      //     });\n      //   }\n      // }, this.noderegister[dataNode.html].options)).$mount();\n      // content.appendChild(wrapper.$el);\n\n\n      // Object.entries(dataNode.data).forEach(function (key, value) {\n      //   if (_typeof(key[1]) === \"object\") {\n      //     insertObjectkeys(null, key[0], key[0]);\n      //   } else {\n      //     var elems = content.querySelectorAll('[df-' + key[0] + ']');\n\n      //     for (var i = 0; i < elems.length; i++) {\n      //       elems[i].value = key[1];\n      //     }\n      //   }\n      // });\n\n      // function insertObjectkeys(object, name, completname) {\n      //   if (object === null) {\n      //     var object = dataNode.data[name];\n      //   } else {\n      //     var object = object[name];\n      //   }\n\n      //   Object.entries(object).forEach(function (key, value) {\n      //     if (_typeof(key[1]) === \"object\") {\n      //       insertObjectkeys(object, key[0], name + '-' + key[0]);\n      //     } else {\n      //       var elems = content.querySelectorAll('[df-' + completname + '-' + key[0] + ']');\n\n      //       for (var i = 0; i < elems.length; i++) {\n      //         elems[i].value = key[1];\n      //       }\n      //     }\n      //   });\n      // }\n\n      node.appendChild(inputs);\n      node.appendChild(content);\n      node.appendChild(outputs);\n      node.style.top = dataNode.pos_y + \"px\";\n      node.style.left = dataNode.pos_x + \"px\";\n      parent.appendChild(node);\n      this.precanvas.appendChild(parent);\n      this.addHistory();\n    }\n  }, {\n    key: \"addRerouteImport\",\n    value: function addRerouteImport(dataNode) {\n      var reroute_width = this.reroute_width;\n      var reroute_fix_curvature = this.reroute_fix_curvature;\n      Object.keys(dataNode.outputs).map(function (output_item, index) {\n        Object.keys(dataNode.outputs[output_item].connections).map(function (input_item, index) {\n          var points = dataNode.outputs[output_item].connections[input_item].points;\n\n          if (points !== undefined) {\n            points.forEach(function (item, i) {\n              var input_id = dataNode.outputs[output_item].connections[input_item].node;\n              var input_class = dataNode.outputs[output_item].connections[input_item].output; //console.log('.connection.node_in_'+input_id+'.node_out_'+dataNode.id+'.'+output_item+'.'+input_class);\n\n              var ele = document.querySelector('.connection.node_in_node-' + input_id + '.node_out_node-' + dataNode.id + '.' + output_item + '.' + input_class);\n\n              if (reroute_fix_curvature) {\n                if (i === 0) {\n                  for (var z = 0; z < points.length; z++) {\n                    var path = document.createElementNS('http://www.w3.org/2000/svg', \"path\");\n                    path.classList.add(\"main-path\");\n                    path.setAttributeNS(null, 'd', '');\n                    ele.appendChild(path);\n                  }\n                }\n              }\n\n              var point = document.createElementNS('http://www.w3.org/2000/svg', \"circle\");\n              point.classList.add(\"point\");\n              var pos_x = item.pos_x;\n              var pos_y = item.pos_y;\n              point.setAttributeNS(null, 'cx', pos_x);\n              point.setAttributeNS(null, 'cy', pos_y);\n              point.setAttributeNS(null, 'r', reroute_width);\n              ele.appendChild(point);\n            });\n          }\n\n          ;\n        });\n      });\n      this.addHistory();\n    }\n  }, {\n    key: \"updateNodeValue\",\n    value: function updateNodeValue(event) {\n      var attr = event.target.attributes;\n\n      for (var i = 0; i < attr.length; i++) {\n        if (attr[i].nodeName.startsWith('df-')) {\n          this.drawflow.drawflow[this.module].data[event.target.closest(\".drawflow_content_node\").parentElement.id.slice(5)].data[attr[i].nodeName.slice(3)] = event.target.value;\n        }\n      }\n      this.addHistory();\n    }\n  }, {\n    key: \"addNodeInput\",\n    value: function addNodeInput(id) {\n      var moduleName = this.getModuleFromNodeId(id);\n      var infoNode = this.getNodeFromId(id);\n      var numInputs = Object.keys(infoNode.inputs).length;\n\n      if (this.module === moduleName) {\n        //Draw input\n        var input = document.createElement('div');\n        input.classList.add(\"input\");\n        input.classList.add(\"input_\" + (numInputs + 1));\n        var parent = document.querySelector('#node-' + id + ' .inputs');\n        parent.appendChild(input);\n        this.updateConnectionNodes('node-' + id);\n      }\n\n      this.drawflow.drawflow[moduleName].data[id].inputs[\"input_\" + (numInputs + 1)] = {\n        \"connections\": []\n      };\n      this.addHistory();\n    }\n  }, {\n    key: \"addNodeOutput\",\n    value: function addNodeOutput(id) {\n      var moduleName = this.getModuleFromNodeId(id);\n      var infoNode = this.getNodeFromId(id);\n      var numOutputs = Object.keys(infoNode.outputs).length;\n\n      if (this.module === moduleName) {\n        //Draw output\n        var output = document.createElement('div');\n        output.classList.add(\"output\");\n        output.classList.add(\"output_\" + (numOutputs + 1));\n        var parent = document.querySelector('#node-' + id + ' .outputs');\n        parent.appendChild(output);\n        this.updateConnectionNodes('node-' + id);\n      }\n\n      this.drawflow.drawflow[moduleName].data[id].outputs[\"output_\" + (numOutputs + 1)] = {\n        \"connections\": []\n      };\n      this.addHistory();\n    }\n  }, {\n    key: \"removeNodeInput\",\n    value: function removeNodeInput(id, input_class) {\n      var _this3 = this;\n\n      var moduleName = this.getModuleFromNodeId(id);\n      var infoNode = this.getNodeFromId(id);\n\n      if (this.module === moduleName) {\n        document.querySelector('#node-' + id + ' .inputs .input.' + input_class).parentNode.removeChild(document.querySelector('#node-' + id + ' .inputs .input.' + input_class));\n      }\n\n      var removeInputs = [];\n      Object.keys(infoNode.inputs[input_class].connections).map(function (key, index) {\n        var id_output = infoNode.inputs[input_class].connections[index].node;\n        var output_class = infoNode.inputs[input_class].connections[index].input;\n        removeInputs.push({\n          id_output: id_output,\n          id: id,\n          output_class: output_class,\n          input_class: input_class\n        });\n      }); // Remove connections\n\n      removeInputs.forEach(function (item, i) {\n        _this3.removeSingleConnection(item.id_output, item.id, item.output_class, item.input_class);\n      });\n      delete this.drawflow.drawflow[moduleName].data[id].inputs[input_class]; // Update connection\n\n      var connections = [];\n      var connectionsInputs = this.drawflow.drawflow[moduleName].data[id].inputs;\n      Object.keys(connectionsInputs).map(function (key, index) {\n        connections.push(connectionsInputs[key]);\n      });\n      this.drawflow.drawflow[moduleName].data[id].inputs = {};\n      var input_class_id = input_class.slice(6);\n      var nodeUpdates = [];\n      connections.forEach(function (item, i) {\n        item.connections.forEach(function (itemx, f) {\n          nodeUpdates.push(itemx);\n        });\n        _this3.drawflow.drawflow[moduleName].data[id].inputs['input_' + (i + 1)] = item;\n      });\n      nodeUpdates = new Set(nodeUpdates.map(function (e) {\n        return JSON.stringify(e);\n      }));\n      nodeUpdates = Array.from(nodeUpdates).map(function (e) {\n        return JSON.parse(e);\n      });\n\n      if (this.module === moduleName) {\n        var eles = document.querySelectorAll(\"#node-\" + id + \" .inputs .input\");\n        eles.forEach(function (item, i) {\n          var id_class = item.classList[1].slice(6);\n\n          if (input_class_id < id_class) {\n            item.classList.remove('input_' + id_class);\n            item.classList.add('input_' + (id_class - 1));\n          }\n        });\n      }\n\n      nodeUpdates.forEach(function (itemx, i) {\n        _this3.drawflow.drawflow[moduleName].data[itemx.node].outputs[itemx.input].connections.forEach(function (itemz, g) {\n          if (itemz.node == id) {\n            var output_id = itemz.output.slice(6);\n\n            if (input_class_id < output_id) {\n              if (_this3.module === moduleName) {\n                var ele = document.querySelector(\".connection.node_in_node-\" + id + \".node_out_node-\" + itemx.node + \".\" + itemx.input + \".input_\" + output_id);\n                ele.classList.remove('input_' + output_id);\n                ele.classList.add('input_' + (output_id - 1));\n              }\n\n              if (itemz.points) {\n                _this3.drawflow.drawflow[moduleName].data[itemx.node].outputs[itemx.input].connections[g] = {\n                  node: itemz.node,\n                  output: 'input_' + (output_id - 1),\n                  points: itemz.points\n                };\n              } else {\n                _this3.drawflow.drawflow[moduleName].data[itemx.node].outputs[itemx.input].connections[g] = {\n                  node: itemz.node,\n                  output: 'input_' + (output_id - 1)\n                };\n              }\n            }\n          }\n        });\n      });\n      this.updateConnectionNodes('node-' + id);\n      this.addHistory();\n    }\n  }, {\n    key: \"removeNodeOutput\",\n    value: function removeNodeOutput(id, output_class) {\n      var _this4 = this;\n\n      var moduleName = this.getModuleFromNodeId(id);\n      var infoNode = this.getNodeFromId(id);\n\n      if (this.module === moduleName) {\n        //document.querySelector('#node-' + id + ' .outputs .output.' + output_class).remove();\n        document.querySelector('#node-' + id + ' .outputs .output.' + output_class).parentNode.removeChild(document.querySelector('#node-' + id + ' .outputs .output.' + output_class));\n      }\n\n      var removeOutputs = [];\n      Object.keys(infoNode.outputs[output_class].connections).map(function (key, index) {\n        var id_input = infoNode.outputs[output_class].connections[index].node;\n        var input_class = infoNode.outputs[output_class].connections[index].output;\n        removeOutputs.push({\n          id: id,\n          id_input: id_input,\n          output_class: output_class,\n          input_class: input_class\n        });\n      }); // Remove connections\n\n      removeOutputs.forEach(function (item, i) {\n        _this4.removeSingleConnection(item.id, item.id_input, item.output_class, item.input_class);\n      });\n      delete this.drawflow.drawflow[moduleName].data[id].outputs[output_class]; // Update connection\n\n      var connections = [];\n      var connectionsOuputs = this.drawflow.drawflow[moduleName].data[id].outputs;\n      Object.keys(connectionsOuputs).map(function (key, index) {\n        connections.push(connectionsOuputs[key]);\n      });\n      this.drawflow.drawflow[moduleName].data[id].outputs = {};\n      var output_class_id = output_class.slice(7);\n      var nodeUpdates = [];\n      connections.forEach(function (item, i) {\n        item.connections.forEach(function (itemx, f) {\n          nodeUpdates.push({\n            node: itemx.node,\n            output: itemx.output\n          });\n        });\n        _this4.drawflow.drawflow[moduleName].data[id].outputs['output_' + (i + 1)] = item;\n      });\n      nodeUpdates = new Set(nodeUpdates.map(function (e) {\n        return JSON.stringify(e);\n      }));\n      nodeUpdates = Array.from(nodeUpdates).map(function (e) {\n        return JSON.parse(e);\n      });\n\n      if (this.module === moduleName) {\n        var eles = document.querySelectorAll(\"#node-\" + id + \" .outputs .output\");\n        eles.forEach(function (item, i) {\n          var id_class = item.classList[1].slice(7);\n\n          if (output_class_id < id_class) {\n            item.classList.remove('output_' + id_class);\n            item.classList.add('output_' + (id_class - 1));\n          }\n        });\n      }\n\n      nodeUpdates.forEach(function (itemx, i) {\n        _this4.drawflow.drawflow[moduleName].data[itemx.node].inputs[itemx.output].connections.forEach(function (itemz, g) {\n          if (itemz.node == id) {\n            var input_id = itemz.input.slice(7);\n\n            if (output_class_id < input_id) {\n              if (_this4.module === moduleName) {\n                var ele = document.querySelector(\".connection.node_in_node-\" + itemx.node + \".node_out_node-\" + id + \".output_\" + input_id + \".\" + itemx.output);\n                ele.classList.remove('output_' + input_id);\n                ele.classList.remove(itemx.output);\n                ele.classList.add('output_' + (input_id - 1));\n                ele.classList.add(itemx.output);\n              }\n\n              if (itemz.points) {\n                _this4.drawflow.drawflow[moduleName].data[itemx.node].inputs[itemx.output].connections[g] = {\n                  node: itemz.node,\n                  input: 'output_' + (input_id - 1),\n                  points: itemz.points\n                };\n              } else {\n                _this4.drawflow.drawflow[moduleName].data[itemx.node].inputs[itemx.output].connections[g] = {\n                  node: itemz.node,\n                  input: 'output_' + (input_id - 1)\n                };\n              }\n            }\n          }\n        });\n      });\n      this.updateConnectionNodes('node-' + id);\n      this.addHistory();\n    }\n  }, {\n    key: \"removeNodeId\",\n    value: function removeNodeId(id) {\n      this.removeConnectionNodeId(id, false);\n      var moduleName = this.getModuleFromNodeId(id.slice(5));\n      var classSelect = id.replace(\"node-\", \"\");\n\n      if (this.module === moduleName) {\n        //document.getElementById(id).remove();\n        document.getElementById(id).parentNode.removeChild(document.getElementById(id));\n      }\n\n      delete this.drawflow.drawflow[moduleName].data[id.slice(5)];\n      this.showDataToLeft();\n      this.dispatch('nodeRemoved', id.slice(5));\n      this.addHistory();\n    }\n  }, {\n    key: \"removeConnection\",\n    value: function removeConnection() {\n      if (this.connection_selected != null) {\n        var listclass = this.connection_selected.parentNode.getAttribute('class').split(\" \");\n        arr_delete_connection.push(listclass[1] + ' ' + listclass[2]);\n        //this.connection_selected.parentElement.remove();\n        this.connection_selected.parentNode.parentNode.removeChild(this.connection_selected.parentNode);\n        //console.log(listclass);\n        var index_out = this.drawflow.drawflow[this.module].data[listclass[2].slice(14)].outputs[listclass[3]].connections.findIndex(function (item, i) {\n          return item.node === listclass[1].slice(13) && item.output === listclass[4];\n        });\n        this.drawflow.drawflow[this.module].data[listclass[2].slice(14)].outputs[listclass[3]].connections.splice(index_out, 1);\n        var index_in = this.drawflow.drawflow[this.module].data[listclass[1].slice(13)].inputs[listclass[4]].connections.findIndex(function (item, i) {\n          return item.node === listclass[2].slice(14) && item.input === listclass[3];\n        });\n        this.drawflow.drawflow[this.module].data[listclass[1].slice(13)].inputs[listclass[4]].connections.splice(index_in, 1);\n        this.dispatch('connectionRemoved', {\n          output_id: listclass[2].slice(14),\n          input_id: listclass[1].slice(13),\n          output_class: listclass[3],\n          input_class: listclass[4]\n        });\n        this.connection_selected = null;\n        this.addHistory();\n      }\n    }\n  }, {\n    key: \"removeSingleConnection\",\n    value: function removeSingleConnection(id_output, id_input, output_class, input_class) {\n      var nodeOneModule = this.getModuleFromNodeId(id_output);\n      var nodeTwoModule = this.getModuleFromNodeId(id_input);\n\n      if (nodeOneModule === nodeTwoModule) {\n        // Check nodes in same module.\n        // Check connection exist\n        var exists = this.drawflow.drawflow[nodeOneModule].data[id_output].outputs[output_class].connections.findIndex(function (item, i) {\n          return item.node == id_input && item.output === input_class;\n        });\n\n        if (exists > -1) {\n          if (this.module === nodeOneModule) {\n            // In same module with view.\n            //document.querySelector('.connection.node_in_node-' + id_input + '.node_out_node-' + id_output + '.' + output_class + '.' + input_class).remove();\n            document.querySelector('.connection.node_in_node-' + id_input + '.node_out_node-' + id_output + '.' + output_class + '.' + input_class).parentNode.removeChild(document.querySelector('.connection.node_in_node-' + id_input + '.node_out_node-' + id_output + '.' + output_class + '.' + input_class));\n          }\n\n          var index_out = this.drawflow.drawflow[nodeOneModule].data[id_output].outputs[output_class].connections.findIndex(function (item, i) {\n            return item.node == id_input && item.output === input_class;\n          });\n          this.drawflow.drawflow[nodeOneModule].data[id_output].outputs[output_class].connections.splice(index_out, 1);\n          var index_in = this.drawflow.drawflow[nodeOneModule].data[id_input].inputs[input_class].connections.findIndex(function (item, i) {\n            return item.node == id_output && item.input === output_class;\n          });\n          this.drawflow.drawflow[nodeOneModule].data[id_input].inputs[input_class].connections.splice(index_in, 1);\n          this.dispatch('connectionRemoved', {\n            output_id: id_output,\n            input_id: id_input,\n            output_class: output_class,\n            input_class: input_class\n          });\n          this.addHistory();\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"removeConnectionNodeId\",\n    value: function removeConnectionNodeId(id, saveHistory) {\n      var idSearchIn = 'node_in_' + id;\n      var idSearchOut = 'node_out_' + id;\n      var elemsOut = document.getElementsByClassName(idSearchOut);\n\n      for (var i = elemsOut.length - 1; i >= 0; i--) {\n        var listclass = elemsOut[i].getAttribute('class').split(' ');\n        var index_in = this.drawflow.drawflow[this.module].data[listclass[1].slice(13)].inputs[listclass[4]].connections.filter(function (item, i) {\n          return item.node != listclass[2].slice(14) && item.input === listclass[3];\n        });\n        this.drawflow.drawflow[this.module].data[listclass[1].slice(13)].inputs[listclass[4]].connections = index_in;\n        // this.drawflow.drawflow[this.module].data[listclass[1].slice(13)].inputs[listclass[4]].connections.splice(index_in, 1);\n        var index_out = this.drawflow.drawflow[this.module].data[listclass[2].slice(14)].outputs[listclass[3]].connections.filter(function (item, i) {\n          return item.node != listclass[1].slice(13) && item.output === listclass[4];\n        });\n        elemsOut[i].parentNode.removeChild(elemsOut[i]);\n        // this.drawflow.drawflow[this.module].data[listclass[2].slice(14)].outputs[listclass[3]].connections.splice(index_out, 1);\n        this.drawflow.drawflow[this.module].data[listclass[2].slice(14)].outputs[listclass[3]].connections = index_out;\n        // elemsOut[i].remove();\n        this.dispatch('connectionRemoved', {\n          output_id: listclass[2].slice(14),\n          input_id: listclass[1].slice(13),\n          output_class: listclass[3],\n          input_class: listclass[4]\n        });\n      }\n\n      var elemsIn = document.getElementsByClassName(idSearchIn);\n\n      for (var i = elemsIn.length - 1; i >= 0; i--) {\n        var listclass = elemsIn[i].getAttribute('class').split(' ');\n        var index_out = this.drawflow.drawflow[this.module].data[listclass[2].slice(14)].outputs[listclass[3]].connections.filter(function (item, i) {\n          return item.node === listclass[1].slice(13) && item.output === listclass[4];\n        });\n        this.drawflow.drawflow[this.module].data[listclass[2].slice(14)].outputs[listclass[3]].connections.splice(index_out, 1);\n        var index_in = this.drawflow.drawflow[this.module].data[listclass[1].slice(13)].inputs[listclass[4]].connections.filter(function (item, i) {\n          return item.node === listclass[2].slice(14) && item.input === listclass[3];\n        });\n        this.drawflow.drawflow[this.module].data[listclass[1].slice(13)].inputs[listclass[4]].connections.splice(index_in, 1);\n        //elemsIn[i].remove();\n        elemsIn[i].parentNode.removeChild(elemsIn[i]);\n        this.dispatch('connectionRemoved', {\n          output_id: listclass[2].slice(14),\n          input_id: listclass[1].slice(13),\n          output_class: listclass[3],\n          input_class: listclass[4]\n        });\n      }\n      if (saveHistory) {\n        this.addHistory();\n      }\n    }\n  }, {\n    key: \"getModuleFromNodeId\",\n    value: function getModuleFromNodeId(id) {\n      var nameModule;\n      var editor = this.drawflow.drawflow;\n      Object.keys(editor).map(function (moduleName, index) {\n        Object.keys(editor[moduleName].data).map(function (node, index2) {\n          if (node == id) {\n            nameModule = moduleName;\n          }\n        });\n      });\n      return nameModule;\n    }\n  }, {\n    key: \"addModule\",\n    value: function addModule(name) {\n      this.drawflow.drawflow[name] = {\n        \"data\": {}\n      };\n      this.dispatch('moduleCreated', name);\n    }\n  }, {\n    key: \"changeModule\",\n    value: function changeModule(name) {\n      this.dispatch('moduleChanged', name);\n      this.module = name;\n      this.precanvas.innerHTML = \"\";\n      this.canvas_x = 0;\n      this.canvas_y = 0;\n      this.pos_x = 0;\n      this.pos_y = 0;\n      this.mouse_x = 0;\n      this.mouse_y = 0;\n      this.zoom = 1;\n      this.precanvas.style.transform = '';\n      this.import(this.drawflow);\n    }\n  }, {\n    key: \"removeModule\",\n    value: function removeModule(name) {\n      if (this.module === name) {\n        this.changeModule('Home');\n      }\n\n      delete this.drawflow.drawflow[name];\n      this.dispatch('moduleRemoved', name);\n    }\n  }, {\n    key: \"clearModuleSelected\",\n    value: function clearModuleSelected() {\n      this.precanvas.innerHTML = \"\";\n      this.drawflow.drawflow[this.module] = {\n        \"data\": {}\n      };\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.precanvas.innerHTML = \"\";\n      this.drawflow = {\n        \"drawflow\": {\n          \"Home\": {\n            \"data\": {}\n          }\n        }\n      };\n      // this.addHistory();\n    }\n    // }, {\n    //   key: \"export\",\n    //   value: function _export() {\n    //     return JSON.parse(JSON.stringify(this.drawflow));\n    //   }\n    // }, {\n    //   key: \"import\",\n    //   value: function _import(data) {\n    //     this.clear();\n    //     this.drawflow = JSON.parse(JSON.stringify(data));\n    //     this.load();\n    //     this.dispatch('import', 'import');\n    //   }\n    /* Events */\n\n  }, {\n    key: \"on\",\n    value: function on(event, callback) {\n      // Check if the callback is not a function\n      if (typeof callback !== 'function') {\n        console.error(\"The listener callback must be a function, the given type is \".concat(_typeof(callback)));\n        return false;\n      } // Check if the event is not a string\n\n\n      if (typeof event !== 'string') {\n        console.error(\"The event name must be a string, the given type is \".concat(_typeof(event)));\n        return false;\n      } // Check if this event not exists\n\n\n      if (this.events[event] === undefined) {\n        this.events[event] = {\n          listeners: []\n        };\n      }\n\n      this.events[event].listeners.push(callback);\n    }\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(event, callback) {\n      // Check if this event not exists\n      if (this.events[event] === undefined) {\n        //console.error(`This event: ${event} does not exist`);\n        return false;\n      }\n\n      this.events[event].listeners = this.events[event].listeners.filter(function (listener) {\n        return listener.toString() !== callback.toString();\n      });\n    }\n  }, {\n    key: \"dispatch\",\n    value: function dispatch(event, details) {\n      // Check if this event not exists\n      if (this.events[event] === undefined) {\n        // console.error(`This event: ${event} does not exist`);\n        return false;\n      }\n\n      this.events[event].listeners.forEach(function (listener) {\n        listener(details);\n      });\n    }\n  }, {\n    key: \"addHistory\",\n    value: function addHistory() {\n      if (this.preventHistoryEvent) return;\n      if (!this.isChanged()) return;\n      if (this.currentHitoryIndex >= this.history.length - 1) {\n        this.history.push($.extend(true, {}, this.drawflow.drawflow));\n        if (this.history.length > this.maximumHistories) this.history.shift();\n        this.currentHitoryIndex = this.history.length - 1;\n      } else {\n        this.history.length = this.currentHitoryIndex + 1;\n        this.addHistory();\n      }\n    }\n  }, {\n    key: \"clearHistory\",\n    value: function clearHistory() {\n      if (this.preventHistoryEvent) return;\n      this.history.length = 0;\n    }\n  }, {\n    key: \"isChanged\",\n    value: function isChanged() {\n      return JSON.stringify(this.drawflow.drawflow) != JSON.stringify(this.history[this.currentHitoryIndex]);\n    }\n  }, {\n    key: \"undo\",\n    value: function undo() {\n      if (this.preventHistoryEvent) return;\n      if (this.history.length) {\n        if (this.isChanged()) {\n          this.addHistory();\n          this.undo();\n        } else if (this.currentHitoryIndex) {\n          this.currentHitoryIndex--;\n          this.preventHistoryEvent = true;\n          this.clear();\n          this.drawflow.drawflow = $.extend(true, {}, this.history[this.currentHitoryIndex]);\n          this.load();\n          this.preventHistoryEvent = false;\n        }\n      }\n    }\n  }, {\n    key: \"redo\",\n    value: function redo() {\n      if (this.preventHistoryEvent) return;\n      if (this.history.length && this.currentHitoryIndex < this.history.length - 1) {\n        this.currentHitoryIndex++;\n        this.preventHistoryEvent = true;\n        this.clear();\n        this.drawflow.drawflow = $.extend(true, {}, this.history[this.currentHitoryIndex]);\n        this.load();\n        this.preventHistoryEvent = false;\n      }\n    }\n  }, {\n    key: \"focusData\",\n    value: function focusData(e, drawclick, id) {\n      $('.drawflow').children().map(function (i, val) {\n        if (val.childNodes && val.childNodes.length > 0 && val.childNodes[0].tagName == 'DIV') {\n          val.childNodes[0].setAttribute(\"class\", val.childNodes[0].getAttribute(\"class\").replace(\" selected\", \"\"));\n        }\n      });\n      //remove css svg and css target\n      $('.connection').map(function (i, val) {\n        if (val && val.childNodes.length > 0 && val.childNodes[0].tagName == 'path') {\n          val.childNodes[0].setAttribute(\"class\", val.childNodes[0].getAttribute(\"class\").replace(\" target-trigger\", \"\"));\n          $(val).css('z-index', '0');\n        }\n      });\n      $('.content-scenario').children().map(function (i, item) {\n        if (item.tagName == 'P') {\n          item.setAttribute(\"class\", item.getAttribute(\"class\").replace(\" focus-data\", \"\"));\n        }\n      });\n      $('.content-qa').children().map(function (i, item) {\n        if (item.tagName == 'P') {\n          item.setAttribute(\"class\", item.getAttribute(\"class\").replace(\" focus-data\", \"\"));\n        }\n      });\n      // $('.edit-btn-scenario').val('')\n      //click node focus\n      if (drawclick) {\n        var selector = e.getAttribute(\"id\").replace('node-', '');\n        var elem = $('#node-' + selector);\n        elem.addClass(\"selected\");\n        var className = e.getAttribute(\"id\").replace(\"node-\", \"\");\n        $('.' + className).addClass(\"focus-data\");\n        var addIdEdit = e.getAttribute(\"id\").replace(\"node-\", \"\");\n        $('.connection').map(function (i, val) {\n          if (val.childNodes && val.childNodes.length > 0 && val.childNodes[0].tagName == 'path') {\n            var classList = val.getAttribute('class').split(' ');\n            if (classList[1] == 'node_in_node-' + selector || classList[2] == 'node_out_node-' + selector) {\n              $(val.childNodes[0]).addClass('target-trigger');\n              $(val).css('z-index', '1');\n            }\n          }\n        });\n      }\n      //add node focus\n      if (id) {\n        var elem = $('#node-' + id);\n        elem.addClass(\"selected\");\n        // $('#drawflow').animate({\n        //     scrollTop: elem.position().top - (($('#drawflow').height() - elem.height()) / 2),\n        //     scrollLeft: elem.position().left - (($('#drawflow').width() - elem.width()) / 2)\n        // }, {\n        //     duration: 300,\n        // });\n        $('.' + id).addClass(\"focus-data\");\n        var addIdEdit = id;\n        $('.connection').map(function (i, val) {\n          if (val.childNodes && val.childNodes.length > 0 && val.childNodes[0].tagName == 'path') {\n            var classList = val.getAttribute('class').split(' ');\n            if (classList[1] == 'node_in_node-' + addIdEdit || classList[2] == 'node_out_node-' + addIdEdit) {\n              $(val.childNodes[0]).addClass('target-trigger');\n              $(val).css('z-index', '1');\n            }\n          }\n        });\n      }\n      //content click focus\n      if (!drawclick && !id) {\n        var elem = $('#node-' + e.getAttribute(\"class\"));\n        elem.addClass(\"selected\");\n        $('#drawflow').animate({\n          scrollTop: elem.position().top - ($('#drawflow').height() - elem.height()) / 2,\n          scrollLeft: elem.position().left - ($('#drawflow').width() - elem.width()) / 2\n        }, {\n          duration: 300\n        });\n        $('.' + e.getAttribute(\"class\")).addClass(\"focus-data\");\n        var addIdEdit = e.getAttribute(\"class\").replace(\" focus-data\", \"\");\n        $('.connection').map(function (i, val) {\n          if (val.childNodes && val.childNodes.length > 0 && val.childNodes[0].tagName == 'path') {\n            var classList = val.getAttribute('class').split(' ');\n            if (classList[1] == 'node_in_node-' + addIdEdit || classList[2] == 'node_out_node-' + addIdEdit) {\n              $(val.childNodes[0]).addClass('target-trigger');\n              $(val).css('z-index', '1');\n            }\n          }\n        });\n      }\n      $('#qaModal').modal('hide');\n    }\n  }, {\n    key: \"showDataToLeft\",\n    value: function showDataToLeft() {\n      var data = this.drawflow.drawflow[this.module].data;\n      $('.content-qa').innerHTML = '';\n      $('.content-scenario').innerHTML = '';\n      var html_dataQa = new Array();\n      var html_dataScenario = new Array();\n      if (data) {\n        $.each(data, function (index, value) {\n          var html = '<p class=\"' + index + '\" onclick=\"editor.focusData(this)\">' + value.name + '</p>';\n          if (index.substr(0, 1) == 'q') {\n            html_dataQa.push(html);\n          }\n          if (index.substr(0, 1) == 's') {\n            html_dataScenario.push(html);\n          }\n        });\n      }\n      $('.content-qa').html(html_dataQa);\n      $('.content-scenario').html(html_dataScenario);\n    }\n  }]);\n\n  return Drawflow;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/js/drawflow/drawflow.js\n");

/***/ }),

/***/ 6:
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("./resources/assets/js/drawflow.js");


/***/ })

/******/ });